{"ast":null,"code":"import { CHANNEL_EVENTS, CHANNEL_STATES, MAX_PUSH_BUFFER_SIZE } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nimport { httpEndpointURL } from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\nexport var REALTIME_LISTEN_TYPES;\n(function (REALTIME_LISTEN_TYPES) {\n  REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n  REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n  REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n  REALTIME_LISTEN_TYPES[\"SYSTEM\"] = \"system\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\nexport var REALTIME_SUBSCRIBE_STATES;\n(function (REALTIME_SUBSCRIBE_STATES) {\n  REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n  REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n  REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n  REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\nexport const REALTIME_CHANNEL_STATES = CHANNEL_STATES;\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n */\nexport default class RealtimeChannel {\n  constructor(/** Topic name can be any string. */\n  topic, params = {\n    config: {}\n  }, socket) {\n    var _a, _b;\n    this.topic = topic;\n    this.params = params;\n    this.socket = socket;\n    this.bindings = {};\n    this.state = CHANNEL_STATES.closed;\n    this.joinedOnce = false;\n    this.pushBuffer = [];\n    this.subTopic = topic.replace(/^realtime:/i, '');\n    this.params.config = Object.assign({\n      broadcast: {\n        ack: false,\n        self: false\n      },\n      presence: {\n        key: '',\n        enabled: false\n      },\n      private: false\n    }, params.config);\n    this.timeout = this.socket.timeout;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined;\n      this.rejoinTimer.reset();\n      this.pushBuffer.forEach(pushEvent => pushEvent.send());\n      this.pushBuffer = [];\n    });\n    this._onClose(() => {\n      this.rejoinTimer.reset();\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`);\n      this.state = CHANNEL_STATES.closed;\n      this.socket._remove(this);\n    });\n    this._onError(reason => {\n      if (this._isLeaving() || this._isClosed()) {\n        return;\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('timeout', () => {\n      if (!this._isJoining()) {\n        return;\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('error', reason => {\n      if (this._isLeaving() || this._isClosed()) {\n        return;\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n      this._trigger(this._replyEventName(ref), payload);\n    });\n    this.presence = new RealtimePresence(this);\n    this.broadcastEndpointURL = httpEndpointURL(this.socket.endPoint);\n    this.private = this.params.config.private || false;\n    if (!this.private && ((_b = (_a = this.params.config) === null || _a === void 0 ? void 0 : _a.broadcast) === null || _b === void 0 ? void 0 : _b.replay)) {\n      throw `tried to use replay on public channel '${this.topic}'. It must be a private channel.`;\n    }\n  }\n  /** Subscribe registers your client with the server */\n  subscribe(callback, timeout = this.timeout) {\n    var _a, _b, _c;\n    if (!this.socket.isConnected()) {\n      this.socket.connect();\n    }\n    if (this.state == CHANNEL_STATES.closed) {\n      const {\n        config: {\n          broadcast,\n          presence,\n          private: isPrivate\n        }\n      } = this.params;\n      const postgres_changes = (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map(r => r.filter)) !== null && _b !== void 0 ? _b : [];\n      const presence_enabled = !!this.bindings[REALTIME_LISTEN_TYPES.PRESENCE] && this.bindings[REALTIME_LISTEN_TYPES.PRESENCE].length > 0 || ((_c = this.params.config.presence) === null || _c === void 0 ? void 0 : _c.enabled) === true;\n      const accessTokenPayload = {};\n      const config = {\n        broadcast,\n        presence: Object.assign(Object.assign({}, presence), {\n          enabled: presence_enabled\n        }),\n        postgres_changes,\n        private: isPrivate\n      };\n      if (this.socket.accessTokenValue) {\n        accessTokenPayload.access_token = this.socket.accessTokenValue;\n      }\n      this._onError(e => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e));\n      this._onClose(() => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CLOSED));\n      this.updateJoinPayload(Object.assign({\n        config\n      }, accessTokenPayload));\n      this.joinedOnce = true;\n      this._rejoin(timeout);\n      this.joinPush.receive('ok', async ({\n        postgres_changes\n      }) => {\n        var _a;\n        this.socket.setAuth();\n        if (postgres_changes === undefined) {\n          callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\n          return;\n        } else {\n          const clientPostgresBindings = this.bindings.postgres_changes;\n          const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n          const newPostgresBindings = [];\n          for (let i = 0; i < bindingsLen; i++) {\n            const clientPostgresBinding = clientPostgresBindings[i];\n            const {\n              filter: {\n                event,\n                schema,\n                table,\n                filter\n              }\n            } = clientPostgresBinding;\n            const serverPostgresFilter = postgres_changes && postgres_changes[i];\n            if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {\n              newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), {\n                id: serverPostgresFilter.id\n              }));\n            } else {\n              this.unsubscribe();\n              this.state = CHANNEL_STATES.errored;\n              callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error('mismatch between server and client bindings for postgres changes'));\n              return;\n            }\n          }\n          this.bindings.postgres_changes = newPostgresBindings;\n          callback && callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\n          return;\n        }\n      }).receive('error', error => {\n        this.state = CHANNEL_STATES.errored;\n        callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n        return;\n      }).receive('timeout', () => {\n        callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.TIMED_OUT);\n        return;\n      });\n    }\n    return this;\n  }\n  presenceState() {\n    return this.presence.state;\n  }\n  async track(payload, opts = {}) {\n    return await this.send({\n      type: 'presence',\n      event: 'track',\n      payload\n    }, opts.timeout || this.timeout);\n  }\n  async untrack(opts = {}) {\n    return await this.send({\n      type: 'presence',\n      event: 'untrack'\n    }, opts);\n  }\n  on(type, filter, callback) {\n    if (this.state === CHANNEL_STATES.joined && type === REALTIME_LISTEN_TYPES.PRESENCE) {\n      this.socket.log('channel', `resubscribe to ${this.topic} due to change in presence callbacks on joined channel`);\n      this.unsubscribe().then(() => this.subscribe());\n    }\n    return this._on(type, filter, callback);\n  }\n  /**\n   * Sends a message into the channel.\n   *\n   * @param args Arguments to send to channel\n   * @param args.type The type of event to send\n   * @param args.event The name of the event being sent\n   * @param args.payload Payload to be sent\n   * @param opts Options to be used during the send process\n   */\n  async send(args, opts = {}) {\n    var _a, _b;\n    if (!this._canPush() && args.type === 'broadcast') {\n      const {\n        event,\n        payload: endpoint_payload\n      } = args;\n      const authorization = this.socket.accessTokenValue ? `Bearer ${this.socket.accessTokenValue}` : '';\n      const options = {\n        method: 'POST',\n        headers: {\n          Authorization: authorization,\n          apikey: this.socket.apiKey ? this.socket.apiKey : '',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messages: [{\n            topic: this.subTopic,\n            event,\n            payload: endpoint_payload,\n            private: this.private\n          }]\n        })\n      };\n      try {\n        const response = await this._fetchWithTimeout(this.broadcastEndpointURL, options, (_a = opts.timeout) !== null && _a !== void 0 ? _a : this.timeout);\n        await ((_b = response.body) === null || _b === void 0 ? void 0 : _b.cancel());\n        return response.ok ? 'ok' : 'error';\n      } catch (error) {\n        if (error.name === 'AbortError') {\n          return 'timed out';\n        } else {\n          return 'error';\n        }\n      }\n    } else {\n      return new Promise(resolve => {\n        var _a, _b, _c;\n        const push = this._push(args.type, args, opts.timeout || this.timeout);\n        if (args.type === 'broadcast' && !((_c = (_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n          resolve('ok');\n        }\n        push.receive('ok', () => resolve('ok'));\n        push.receive('error', () => resolve('error'));\n        push.receive('timeout', () => resolve('timed out'));\n      });\n    }\n  }\n  updateJoinPayload(payload) {\n    this.joinPush.updatePayload(payload);\n  }\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout) {\n    this.state = CHANNEL_STATES.leaving;\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`);\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef());\n    };\n    this.joinPush.destroy();\n    let leavePush = null;\n    return new Promise(resolve => {\n      leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n      leavePush.receive('ok', () => {\n        onClose();\n        resolve('ok');\n      }).receive('timeout', () => {\n        onClose();\n        resolve('timed out');\n      }).receive('error', () => {\n        resolve('error');\n      });\n      leavePush.send();\n      if (!this._canPush()) {\n        leavePush.trigger('ok', {});\n      }\n    }).finally(() => {\n      leavePush === null || leavePush === void 0 ? void 0 : leavePush.destroy();\n    });\n  }\n  /**\n   * Teardown the channel.\n   *\n   * Destroys and stops related timers.\n   */\n  teardown() {\n    this.pushBuffer.forEach(push => push.destroy());\n    this.pushBuffer = [];\n    this.rejoinTimer.reset();\n    this.joinPush.destroy();\n    this.state = CHANNEL_STATES.closed;\n    this.bindings = {};\n  }\n  /** @internal */\n  async _fetchWithTimeout(url, options, timeout) {\n    const controller = new AbortController();\n    const id = setTimeout(() => controller.abort(), timeout);\n    const response = await this.socket.fetch(url, Object.assign(Object.assign({}, options), {\n      signal: controller.signal\n    }));\n    clearTimeout(id);\n    return response;\n  }\n  /** @internal */\n  _push(event, payload, timeout = this.timeout) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n    }\n    let pushEvent = new Push(this, event, payload, timeout);\n    if (this._canPush()) {\n      pushEvent.send();\n    } else {\n      this._addToPushBuffer(pushEvent);\n    }\n    return pushEvent;\n  }\n  /** @internal */\n  _addToPushBuffer(pushEvent) {\n    pushEvent.startTimeout();\n    this.pushBuffer.push(pushEvent);\n    // Enforce buffer size limit\n    if (this.pushBuffer.length > MAX_PUSH_BUFFER_SIZE) {\n      const removedPush = this.pushBuffer.shift();\n      if (removedPush) {\n        removedPush.destroy();\n        this.socket.log('channel', `discarded push due to buffer overflow: ${removedPush.event}`, removedPush.payload);\n      }\n    }\n  }\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   *\n   * @internal\n   */\n  _onMessage(_event, payload, _ref) {\n    return payload;\n  }\n  /** @internal */\n  _isMember(topic) {\n    return this.topic === topic;\n  }\n  /** @internal */\n  _joinRef() {\n    return this.joinPush.ref;\n  }\n  /** @internal */\n  _trigger(type, payload, ref) {\n    var _a, _b;\n    const typeLower = type.toLocaleLowerCase();\n    const {\n      close,\n      error,\n      leave,\n      join\n    } = CHANNEL_EVENTS;\n    const events = [close, error, leave, join];\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n      return;\n    }\n    let handledPayload = this._onMessage(typeLower, payload, ref);\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n    }\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\n      (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter(bind => {\n        var _a, _b, _c;\n        return ((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' || ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;\n      }).map(bind => bind.callback(handledPayload, ref));\n    } else {\n      (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter(bind => {\n        var _a, _b, _c, _d, _e, _f;\n        if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n          if ('id' in bind) {\n            const bindId = bind.id;\n            const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n            return bindId && ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) && (bindEvent === '*' || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));\n          } else {\n            const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n            return bindEvent === '*' || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());\n          }\n        } else {\n          return bind.type.toLocaleLowerCase() === typeLower;\n        }\n      }).map(bind => {\n        if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n          const postgresChanges = handledPayload.data;\n          const {\n            schema,\n            table,\n            commit_timestamp,\n            type,\n            errors\n          } = postgresChanges;\n          const enrichedPayload = {\n            schema: schema,\n            table: table,\n            commit_timestamp: commit_timestamp,\n            eventType: type,\n            new: {},\n            old: {},\n            errors: errors\n          };\n          handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));\n        }\n        bind.callback(handledPayload, ref);\n      });\n    }\n  }\n  /** @internal */\n  _isClosed() {\n    return this.state === CHANNEL_STATES.closed;\n  }\n  /** @internal */\n  _isJoined() {\n    return this.state === CHANNEL_STATES.joined;\n  }\n  /** @internal */\n  _isJoining() {\n    return this.state === CHANNEL_STATES.joining;\n  }\n  /** @internal */\n  _isLeaving() {\n    return this.state === CHANNEL_STATES.leaving;\n  }\n  /** @internal */\n  _replyEventName(ref) {\n    return `chan_reply_${ref}`;\n  }\n  /** @internal */\n  _on(type, filter, callback) {\n    const typeLower = type.toLocaleLowerCase();\n    const binding = {\n      type: typeLower,\n      filter: filter,\n      callback: callback\n    };\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower].push(binding);\n    } else {\n      this.bindings[typeLower] = [binding];\n    }\n    return this;\n  }\n  /** @internal */\n  _off(type, filter) {\n    const typeLower = type.toLocaleLowerCase();\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower] = this.bindings[typeLower].filter(bind => {\n        var _a;\n        return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower && RealtimeChannel.isEqual(bind.filter, filter));\n      });\n    }\n    return this;\n  }\n  /** @internal */\n  static isEqual(obj1, obj2) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false;\n    }\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /** @internal */\n  _rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout();\n    if (this.socket.isConnected()) {\n      this._rejoin();\n    }\n  }\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   *\n   * @internal\n   */\n  _onClose(callback) {\n    this._on(CHANNEL_EVENTS.close, {}, callback);\n  }\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   *\n   * @internal\n   */\n  _onError(callback) {\n    this._on(CHANNEL_EVENTS.error, {}, reason => callback(reason));\n  }\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   *\n   * @internal\n   */\n  _canPush() {\n    return this.socket.isConnected() && this._isJoined();\n  }\n  /** @internal */\n  _rejoin(timeout = this.timeout) {\n    if (this._isLeaving()) {\n      return;\n    }\n    this.socket._leaveOpenTopic(this.topic);\n    this.state = CHANNEL_STATES.joining;\n    this.joinPush.resend(timeout);\n  }\n  /** @internal */\n  _getPayloadRecords(payload) {\n    const records = {\n      new: {},\n      old: {}\n    };\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record);\n    }\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n    }\n    return records;\n  }\n}","map":{"version":3,"names":["CHANNEL_EVENTS","CHANNEL_STATES","MAX_PUSH_BUFFER_SIZE","Push","Timer","RealtimePresence","Transformers","httpEndpointURL","REALTIME_POSTGRES_CHANGES_LISTEN_EVENT","REALTIME_LISTEN_TYPES","REALTIME_SUBSCRIBE_STATES","REALTIME_CHANNEL_STATES","RealtimeChannel","constructor","topic","params","config","socket","bindings","state","closed","joinedOnce","pushBuffer","subTopic","replace","Object","assign","broadcast","ack","self","presence","key","enabled","private","timeout","joinPush","join","rejoinTimer","_rejoinUntilConnected","reconnectAfterMs","receive","joined","reset","forEach","pushEvent","send","_onClose","log","_joinRef","_remove","_onError","reason","_isLeaving","_isClosed","errored","scheduleTimeout","_isJoining","_on","reply","payload","ref","_trigger","_replyEventName","broadcastEndpointURL","endPoint","_b","_a","replay","subscribe","callback","isConnected","connect","isPrivate","postgres_changes","map","r","filter","presence_enabled","PRESENCE","length","_c","accessTokenPayload","accessTokenValue","access_token","e","CHANNEL_ERROR","CLOSED","updateJoinPayload","_rejoin","setAuth","undefined","SUBSCRIBED","clientPostgresBindings","bindingsLen","newPostgresBindings","i","clientPostgresBinding","event","schema","table","serverPostgresFilter","push","id","unsubscribe","Error","error","JSON","stringify","values","TIMED_OUT","presenceState","track","opts","type","untrack","on","then","args","_canPush","endpoint_payload","authorization","options","method","headers","Authorization","apikey","apiKey","body","messages","response","_fetchWithTimeout","cancel","ok","name","Promise","resolve","_push","updatePayload","leaving","onClose","close","destroy","leavePush","leave","trigger","finally","teardown","url","controller","AbortController","setTimeout","abort","fetch","signal","clearTimeout","_addToPushBuffer","startTimeout","removedPush","shift","_onMessage","_event","_ref","_isMember","typeLower","toLocaleLowerCase","events","indexOf","handledPayload","includes","bind","bindId","bindEvent","ids","data","_e","_d","_f","postgresChanges","commit_timestamp","errors","enrichedPayload","eventType","new","old","_getPayloadRecords","_isJoined","joining","binding","_off","isEqual","obj1","obj2","keys","k","_leaveOpenTopic","resend","records","convertChangeData","columns","record","old_record"],"sources":["C:\\Users\\Home\\Documents\\Documents\\Eng Software\\danz\\node_modules\\@supabase\\realtime-js\\src\\RealtimeChannel.ts"],"sourcesContent":["import { CHANNEL_EVENTS, CHANNEL_STATES, MAX_PUSH_BUFFER_SIZE } from './lib/constants'\nimport Push from './lib/push'\nimport type RealtimeClient from './RealtimeClient'\nimport Timer from './lib/timer'\nimport RealtimePresence, { REALTIME_PRESENCE_LISTEN_EVENTS } from './RealtimePresence'\nimport type {\n  RealtimePresenceJoinPayload,\n  RealtimePresenceLeavePayload,\n  RealtimePresenceState,\n} from './RealtimePresence'\nimport * as Transformers from './lib/transformers'\nimport { httpEndpointURL } from './lib/transformers'\n\ntype ReplayOption = {\n  since: number\n  limit?: number\n}\n\nexport type RealtimeChannelOptions = {\n  config: {\n    /**\n     * self option enables client to receive message it broadcast\n     * ack option instructs server to acknowledge that broadcast message was received\n     * replay option instructs server to replay broadcast messages\n     */\n    broadcast?: { self?: boolean; ack?: boolean; replay?: ReplayOption }\n    /**\n     * key option is used to track presence payload across clients\n     */\n    presence?: { key?: string; enabled?: boolean }\n    /**\n     * defines if the channel is private or not and if RLS policies will be used to check data\n     */\n    private?: boolean\n  }\n}\n\ntype RealtimePostgresChangesPayloadBase = {\n  schema: string\n  table: string\n  commit_timestamp: string\n  errors: string[]\n}\n\nexport type RealtimePostgresInsertPayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`\n    new: T\n    old: {}\n  }\n\nexport type RealtimePostgresUpdatePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`\n    new: T\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresDeletePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`\n    new: {}\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresChangesPayload<T extends { [key: string]: any }> =\n  | RealtimePostgresInsertPayload<T>\n  | RealtimePostgresUpdatePayload<T>\n  | RealtimePostgresDeletePayload<T>\n\nexport type RealtimePostgresChangesFilter<T extends `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT}`> = {\n  /**\n   * The type of database change to listen to.\n   */\n  event: T\n  /**\n   * The database schema to listen to.\n   */\n  schema: string\n  /**\n   * The database table to listen to.\n   */\n  table?: string\n  /**\n   * Receive database changes when filter is matched.\n   */\n  filter?: string\n}\n\nexport type RealtimeChannelSendResponse = 'ok' | 'timed out' | 'error'\n\nexport enum REALTIME_POSTGRES_CHANGES_LISTEN_EVENT {\n  ALL = '*',\n  INSERT = 'INSERT',\n  UPDATE = 'UPDATE',\n  DELETE = 'DELETE',\n}\n\nexport enum REALTIME_LISTEN_TYPES {\n  BROADCAST = 'broadcast',\n  PRESENCE = 'presence',\n  POSTGRES_CHANGES = 'postgres_changes',\n  SYSTEM = 'system',\n}\n\nexport enum REALTIME_SUBSCRIBE_STATES {\n  SUBSCRIBED = 'SUBSCRIBED',\n  TIMED_OUT = 'TIMED_OUT',\n  CLOSED = 'CLOSED',\n  CHANNEL_ERROR = 'CHANNEL_ERROR',\n}\n\nexport const REALTIME_CHANNEL_STATES = CHANNEL_STATES\n\ninterface PostgresChangesFilters {\n  postgres_changes: {\n    id: string\n    event: string\n    schema?: string\n    table?: string\n    filter?: string\n  }[]\n}\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n */\nexport default class RealtimeChannel {\n  bindings: {\n    [key: string]: {\n      type: string\n      filter: { [key: string]: any }\n      callback: Function\n      id?: string\n    }[]\n  } = {}\n  timeout: number\n  state: CHANNEL_STATES = CHANNEL_STATES.closed\n  joinedOnce = false\n  joinPush: Push\n  rejoinTimer: Timer\n  pushBuffer: Push[] = []\n  presence: RealtimePresence\n  broadcastEndpointURL: string\n  subTopic: string\n  private: boolean\n\n  constructor(\n    /** Topic name can be any string. */\n    public topic: string,\n    public params: RealtimeChannelOptions = { config: {} },\n    public socket: RealtimeClient\n  ) {\n    this.subTopic = topic.replace(/^realtime:/i, '')\n    this.params.config = {\n      ...{\n        broadcast: { ack: false, self: false },\n        presence: { key: '', enabled: false },\n        private: false,\n      },\n      ...params.config,\n    }\n    this.timeout = this.socket.timeout\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout)\n    this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs)\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined\n      this.rejoinTimer.reset()\n      this.pushBuffer.forEach((pushEvent: Push) => pushEvent.send())\n      this.pushBuffer = []\n    })\n    this._onClose(() => {\n      this.rejoinTimer.reset()\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`)\n      this.state = CHANNEL_STATES.closed\n      this.socket._remove(this)\n    })\n    this._onError((reason: string) => {\n      if (this._isLeaving() || this._isClosed()) {\n        return\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.joinPush.receive('timeout', () => {\n      if (!this._isJoining()) {\n        return\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n\n    this.joinPush.receive('error', (reason: any) => {\n      if (this._isLeaving() || this._isClosed()) {\n        return\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this._on(CHANNEL_EVENTS.reply, {}, (payload: any, ref: string) => {\n      this._trigger(this._replyEventName(ref), payload)\n    })\n\n    this.presence = new RealtimePresence(this)\n\n    this.broadcastEndpointURL = httpEndpointURL(this.socket.endPoint)\n    this.private = this.params.config.private || false\n\n    if (!this.private && this.params.config?.broadcast?.replay) {\n      throw `tried to use replay on public channel '${this.topic}'. It must be a private channel.`\n    }\n  }\n\n  /** Subscribe registers your client with the server */\n  subscribe(\n    callback?: (status: REALTIME_SUBSCRIBE_STATES, err?: Error) => void,\n    timeout = this.timeout\n  ): RealtimeChannel {\n    if (!this.socket.isConnected()) {\n      this.socket.connect()\n    }\n    if (this.state == CHANNEL_STATES.closed) {\n      const {\n        config: { broadcast, presence, private: isPrivate },\n      } = this.params\n\n      const postgres_changes = this.bindings.postgres_changes?.map((r) => r.filter) ?? []\n\n      const presence_enabled =\n        (!!this.bindings[REALTIME_LISTEN_TYPES.PRESENCE] &&\n          this.bindings[REALTIME_LISTEN_TYPES.PRESENCE].length > 0) ||\n        this.params.config.presence?.enabled === true\n      const accessTokenPayload: { access_token?: string } = {}\n      const config = {\n        broadcast,\n        presence: { ...presence, enabled: presence_enabled },\n        postgres_changes,\n        private: isPrivate,\n      }\n\n      if (this.socket.accessTokenValue) {\n        accessTokenPayload.access_token = this.socket.accessTokenValue\n      }\n\n      this._onError((e: Error) => callback?.(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e))\n\n      this._onClose(() => callback?.(REALTIME_SUBSCRIBE_STATES.CLOSED))\n\n      this.updateJoinPayload({ ...{ config }, ...accessTokenPayload })\n\n      this.joinedOnce = true\n      this._rejoin(timeout)\n\n      this.joinPush\n        .receive('ok', async ({ postgres_changes }: PostgresChangesFilters) => {\n          this.socket.setAuth()\n          if (postgres_changes === undefined) {\n            callback?.(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED)\n            return\n          } else {\n            const clientPostgresBindings = this.bindings.postgres_changes\n            const bindingsLen = clientPostgresBindings?.length ?? 0\n            const newPostgresBindings = []\n\n            for (let i = 0; i < bindingsLen; i++) {\n              const clientPostgresBinding = clientPostgresBindings[i]\n              const {\n                filter: { event, schema, table, filter },\n              } = clientPostgresBinding\n              const serverPostgresFilter = postgres_changes && postgres_changes[i]\n\n              if (\n                serverPostgresFilter &&\n                serverPostgresFilter.event === event &&\n                serverPostgresFilter.schema === schema &&\n                serverPostgresFilter.table === table &&\n                serverPostgresFilter.filter === filter\n              ) {\n                newPostgresBindings.push({\n                  ...clientPostgresBinding,\n                  id: serverPostgresFilter.id,\n                })\n              } else {\n                this.unsubscribe()\n                this.state = CHANNEL_STATES.errored\n\n                callback?.(\n                  REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR,\n                  new Error('mismatch between server and client bindings for postgres changes')\n                )\n                return\n              }\n            }\n\n            this.bindings.postgres_changes = newPostgresBindings\n\n            callback && callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED)\n            return\n          }\n        })\n        .receive('error', (error: { [key: string]: any }) => {\n          this.state = CHANNEL_STATES.errored\n          callback?.(\n            REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR,\n            new Error(JSON.stringify(Object.values(error).join(', ') || 'error'))\n          )\n          return\n        })\n        .receive('timeout', () => {\n          callback?.(REALTIME_SUBSCRIBE_STATES.TIMED_OUT)\n          return\n        })\n    }\n    return this\n  }\n\n  presenceState<T extends { [key: string]: any } = {}>(): RealtimePresenceState<T> {\n    return this.presence.state as RealtimePresenceState<T>\n  }\n\n  async track(\n    payload: { [key: string]: any },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'track',\n        payload,\n      },\n      opts.timeout || this.timeout\n    )\n  }\n\n  async untrack(opts: { [key: string]: any } = {}): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'untrack',\n      },\n      opts\n    )\n  }\n\n  /**\n   * Creates an event handler that listens to changes.\n   */\n  on(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.SYNC}` },\n    callback: () => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}` },\n    callback: (payload: RealtimePresenceJoinPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}` },\n    callback: (payload: RealtimePresenceLeavePayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.ALL}`>,\n    callback: (payload: RealtimePostgresChangesPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`>,\n    callback: (payload: RealtimePostgresInsertPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`>,\n    callback: (payload: RealtimePostgresUpdatePayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`>,\n    callback: (payload: RealtimePostgresDeletePayload<T>) => void\n  ): RealtimeChannel\n  /**\n   * The following is placed here to display on supabase.com/docs/reference/javascript/subscribe.\n   * @param type One of \"broadcast\", \"presence\", or \"postgres_changes\".\n   * @param filter Custom object specific to the Realtime feature detailing which payloads to receive.\n   * @param callback Function to be invoked when event handler is triggered.\n   */\n  on(\n    type: `${REALTIME_LISTEN_TYPES.BROADCAST}`,\n    filter: { event: string },\n    callback: (payload: {\n      type: `${REALTIME_LISTEN_TYPES.BROADCAST}`\n      event: string\n      meta?: {\n        replayed?: boolean\n        id: string\n      }\n      [key: string]: any\n    }) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.BROADCAST}`,\n    filter: { event: string },\n    callback: (payload: {\n      type: `${REALTIME_LISTEN_TYPES.BROADCAST}`\n      event: string\n      meta?: {\n        replayed?: boolean\n        id: string\n      }\n      payload: T\n    }) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.SYSTEM}`,\n    filter: {},\n    callback: (payload: any) => void\n  ): RealtimeChannel\n  on(\n    type: `${REALTIME_LISTEN_TYPES}`,\n    filter: { event: string; [key: string]: string },\n    callback: (payload: any) => void\n  ): RealtimeChannel {\n    if (this.state === CHANNEL_STATES.joined && type === REALTIME_LISTEN_TYPES.PRESENCE) {\n      this.socket.log(\n        'channel',\n        `resubscribe to ${this.topic} due to change in presence callbacks on joined channel`\n      )\n      this.unsubscribe().then(() => this.subscribe())\n    }\n    return this._on(type, filter, callback)\n  }\n  /**\n   * Sends a message into the channel.\n   *\n   * @param args Arguments to send to channel\n   * @param args.type The type of event to send\n   * @param args.event The name of the event being sent\n   * @param args.payload Payload to be sent\n   * @param opts Options to be used during the send process\n   */\n  async send(\n    args: {\n      type: 'broadcast' | 'presence' | 'postgres_changes'\n      event: string\n      payload?: any\n      [key: string]: any\n    },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    if (!this._canPush() && args.type === 'broadcast') {\n      const { event, payload: endpoint_payload } = args\n      const authorization = this.socket.accessTokenValue\n        ? `Bearer ${this.socket.accessTokenValue}`\n        : ''\n      const options = {\n        method: 'POST',\n        headers: {\n          Authorization: authorization,\n          apikey: this.socket.apiKey ? this.socket.apiKey : '',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          messages: [\n            {\n              topic: this.subTopic,\n              event,\n              payload: endpoint_payload,\n              private: this.private,\n            },\n          ],\n        }),\n      }\n\n      try {\n        const response = await this._fetchWithTimeout(\n          this.broadcastEndpointURL,\n          options,\n          opts.timeout ?? this.timeout\n        )\n\n        await response.body?.cancel()\n        return response.ok ? 'ok' : 'error'\n      } catch (error: any) {\n        if (error.name === 'AbortError') {\n          return 'timed out'\n        } else {\n          return 'error'\n        }\n      }\n    } else {\n      return new Promise((resolve) => {\n        const push = this._push(args.type, args, opts.timeout || this.timeout)\n\n        if (args.type === 'broadcast' && !this.params?.config?.broadcast?.ack) {\n          resolve('ok')\n        }\n\n        push.receive('ok', () => resolve('ok'))\n        push.receive('error', () => resolve('error'))\n        push.receive('timeout', () => resolve('timed out'))\n      })\n    }\n  }\n\n  updateJoinPayload(payload: { [key: string]: any }): void {\n    this.joinPush.updatePayload(payload)\n  }\n\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout): Promise<'ok' | 'timed out' | 'error'> {\n    this.state = CHANNEL_STATES.leaving\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`)\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef())\n    }\n\n    this.joinPush.destroy()\n\n    let leavePush: Push | null = null\n\n    return new Promise<RealtimeChannelSendResponse>((resolve) => {\n      leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout)\n      leavePush\n        .receive('ok', () => {\n          onClose()\n          resolve('ok')\n        })\n        .receive('timeout', () => {\n          onClose()\n          resolve('timed out')\n        })\n        .receive('error', () => {\n          resolve('error')\n        })\n\n      leavePush.send()\n      if (!this._canPush()) {\n        leavePush.trigger('ok', {})\n      }\n    }).finally(() => {\n      leavePush?.destroy()\n    })\n  }\n  /**\n   * Teardown the channel.\n   *\n   * Destroys and stops related timers.\n   */\n  teardown() {\n    this.pushBuffer.forEach((push: Push) => push.destroy())\n    this.pushBuffer = []\n    this.rejoinTimer.reset()\n    this.joinPush.destroy()\n    this.state = CHANNEL_STATES.closed\n    this.bindings = {}\n  }\n\n  /** @internal */\n\n  async _fetchWithTimeout(url: string, options: { [key: string]: any }, timeout: number) {\n    const controller = new AbortController()\n    const id = setTimeout(() => controller.abort(), timeout)\n\n    const response = await this.socket.fetch(url, {\n      ...options,\n      signal: controller.signal,\n    })\n\n    clearTimeout(id)\n\n    return response\n  }\n\n  /** @internal */\n  _push(event: string, payload: { [key: string]: any }, timeout = this.timeout) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`\n    }\n    let pushEvent = new Push(this, event, payload, timeout)\n    if (this._canPush()) {\n      pushEvent.send()\n    } else {\n      this._addToPushBuffer(pushEvent)\n    }\n\n    return pushEvent\n  }\n\n  /** @internal */\n  _addToPushBuffer(pushEvent: Push) {\n    pushEvent.startTimeout()\n    this.pushBuffer.push(pushEvent)\n\n    // Enforce buffer size limit\n    if (this.pushBuffer.length > MAX_PUSH_BUFFER_SIZE) {\n      const removedPush = this.pushBuffer.shift()\n      if (removedPush) {\n        removedPush.destroy()\n        this.socket.log(\n          'channel',\n          `discarded push due to buffer overflow: ${removedPush.event}`,\n          removedPush.payload\n        )\n      }\n    }\n  }\n\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   *\n   * @internal\n   */\n  _onMessage(_event: string, payload: any, _ref?: string) {\n    return payload\n  }\n\n  /** @internal */\n  _isMember(topic: string): boolean {\n    return this.topic === topic\n  }\n\n  /** @internal */\n  _joinRef(): string {\n    return this.joinPush.ref\n  }\n\n  /** @internal */\n  _trigger(type: string, payload?: any, ref?: string) {\n    const typeLower = type.toLocaleLowerCase()\n    const { close, error, leave, join } = CHANNEL_EVENTS\n    const events: string[] = [close, error, leave, join]\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n      return\n    }\n    let handledPayload = this._onMessage(typeLower, payload, ref)\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified'\n    }\n\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\n      this.bindings.postgres_changes\n        ?.filter((bind) => {\n          return bind.filter?.event === '*' || bind.filter?.event?.toLocaleLowerCase() === typeLower\n        })\n        .map((bind) => bind.callback(handledPayload, ref))\n    } else {\n      this.bindings[typeLower]\n        ?.filter((bind) => {\n          if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n            if ('id' in bind) {\n              const bindId = bind.id\n              const bindEvent = bind.filter?.event\n              return (\n                bindId &&\n                payload.ids?.includes(bindId) &&\n                (bindEvent === '*' ||\n                  bindEvent?.toLocaleLowerCase() === payload.data?.type.toLocaleLowerCase())\n              )\n            } else {\n              const bindEvent = bind?.filter?.event?.toLocaleLowerCase()\n              return bindEvent === '*' || bindEvent === payload?.event?.toLocaleLowerCase()\n            }\n          } else {\n            return bind.type.toLocaleLowerCase() === typeLower\n          }\n        })\n        .map((bind) => {\n          if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n            const postgresChanges = handledPayload.data\n            const { schema, table, commit_timestamp, type, errors } = postgresChanges\n            const enrichedPayload = {\n              schema: schema,\n              table: table,\n              commit_timestamp: commit_timestamp,\n              eventType: type,\n              new: {},\n              old: {},\n              errors: errors,\n            }\n            handledPayload = {\n              ...enrichedPayload,\n              ...this._getPayloadRecords(postgresChanges),\n            }\n          }\n          bind.callback(handledPayload, ref)\n        })\n    }\n  }\n\n  /** @internal */\n  _isClosed(): boolean {\n    return this.state === CHANNEL_STATES.closed\n  }\n\n  /** @internal */\n  _isJoined(): boolean {\n    return this.state === CHANNEL_STATES.joined\n  }\n\n  /** @internal */\n  _isJoining(): boolean {\n    return this.state === CHANNEL_STATES.joining\n  }\n\n  /** @internal */\n  _isLeaving(): boolean {\n    return this.state === CHANNEL_STATES.leaving\n  }\n\n  /** @internal */\n  _replyEventName(ref: string): string {\n    return `chan_reply_${ref}`\n  }\n\n  /** @internal */\n  _on(type: string, filter: { [key: string]: any }, callback: Function) {\n    const typeLower = type.toLocaleLowerCase()\n    const binding = {\n      type: typeLower,\n      filter: filter,\n      callback: callback,\n    }\n\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower].push(binding)\n    } else {\n      this.bindings[typeLower] = [binding]\n    }\n\n    return this\n  }\n\n  /** @internal */\n  _off(type: string, filter: { [key: string]: any }) {\n    const typeLower = type.toLocaleLowerCase()\n\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n        return !(\n          bind.type?.toLocaleLowerCase() === typeLower &&\n          RealtimeChannel.isEqual(bind.filter, filter)\n        )\n      })\n    }\n    return this\n  }\n\n  /** @internal */\n  private static isEqual(obj1: { [key: string]: string }, obj2: { [key: string]: string }) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false\n    }\n\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /** @internal */\n  private _rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout()\n    if (this.socket.isConnected()) {\n      this._rejoin()\n    }\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   *\n   * @internal\n   */\n  private _onClose(callback: Function) {\n    this._on(CHANNEL_EVENTS.close, {}, callback)\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   *\n   * @internal\n   */\n  private _onError(callback: Function) {\n    this._on(CHANNEL_EVENTS.error, {}, (reason: string) => callback(reason))\n  }\n\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   *\n   * @internal\n   */\n  private _canPush(): boolean {\n    return this.socket.isConnected() && this._isJoined()\n  }\n\n  /** @internal */\n  private _rejoin(timeout = this.timeout): void {\n    if (this._isLeaving()) {\n      return\n    }\n    this.socket._leaveOpenTopic(this.topic)\n    this.state = CHANNEL_STATES.joining\n    this.joinPush.resend(timeout)\n  }\n\n  /** @internal */\n  private _getPayloadRecords(payload: any) {\n    const records = {\n      new: {},\n      old: {},\n    }\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record)\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record)\n    }\n\n    return records\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}