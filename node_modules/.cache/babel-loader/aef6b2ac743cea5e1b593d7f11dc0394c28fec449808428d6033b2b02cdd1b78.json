{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useAuth}from'./useAuth';import{isSupabaseConfigured}from'../lib/supabaseClient';import{addFavoriteItem,fetchMyFavorites,removeFavoriteItem}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const FavoritesContext=/*#__PURE__*/createContext(undefined);export function FavoritesProvider(_ref){let{children}=_ref;const[favorites,setFavorites]=useState([]);const{isAuthenticated}=useAuth();useEffect(()=>{const load=async()=>{if(isSupabaseConfigured&&isAuthenticated){try{const rows=await fetchMyFavorites();setFavorites(rows);try{localStorage.setItem('artistpro_favorites',JSON.stringify(rows));}catch(_unused){}return;}catch(e){console.error('Erro ao buscar favoritos do Supabase, usando localStorage',e);}}// Fallback localStorage (migração de danz_* para artistpro_*)\nconst savedFavorites=localStorage.getItem('artistpro_favorites')||localStorage.getItem('danz_favorites');if(savedFavorites){try{setFavorites(JSON.parse(savedFavorites));}catch(error){console.error('Erro ao carregar favoritos:',error);}}else{setFavorites([]);}};load();},[isAuthenticated]);useEffect(()=>{// Salvar favoritos no localStorage usando nova chave\nlocalStorage.setItem('artistpro_favorites',JSON.stringify(favorites));},[favorites]);const addFavorite=async(type,itemId)=>{if(isSupabaseConfigured&&isAuthenticated){const created=await addFavoriteItem(type,itemId);if(created){setFavorites(prev=>{const exists=prev.some(f=>f.type===created.type&&f.itemId===created.itemId);if(exists)return prev;return[created,...prev];});}return;}const newFavorite={id:Date.now().toString(),userId:'current_user',type,itemId,createdAt:new Date().toISOString()};setFavorites(prev=>{const exists=prev.some(fav=>fav.type===type&&fav.itemId===itemId);if(exists)return prev;return[newFavorite,...prev];});};const removeFavorite=async(type,itemId)=>{if(isSupabaseConfigured&&isAuthenticated){const ok=await removeFavoriteItem(type,itemId);if(ok){setFavorites(prev=>prev.filter(fav=>!(fav.type===type&&fav.itemId===itemId)));}return;}setFavorites(prev=>prev.filter(fav=>!(fav.type===type&&fav.itemId===itemId)));};const isFavorite=(type,itemId)=>{return favorites.some(fav=>fav.type===type&&fav.itemId===itemId);};const getFavoritesByType=type=>{return favorites.filter(fav=>fav.type===type);};return/*#__PURE__*/_jsx(FavoritesContext.Provider,{value:{favorites,addFavorite,removeFavorite,isFavorite,getFavoritesByType},children:children});}export function useFavorites(){const context=useContext(FavoritesContext);if(context===undefined){throw new Error('useFavorites must be used within a FavoritesProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","isSupabaseConfigured","addFavoriteItem","fetchMyFavorites","removeFavoriteItem","jsx","_jsx","FavoritesContext","undefined","FavoritesProvider","_ref","children","favorites","setFavorites","isAuthenticated","load","rows","localStorage","setItem","JSON","stringify","_unused","e","console","error","savedFavorites","getItem","parse","addFavorite","type","itemId","created","prev","exists","some","f","newFavorite","id","Date","now","toString","userId","createdAt","toISOString","fav","removeFavorite","ok","filter","isFavorite","getFavoritesByType","Provider","value","useFavorites","context","Error"],"sources":["C:/Users/Home/Documents/Documents/Eng Software/danz/src/hooks/useFavorites.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { Favorite } from '../types';\r\nimport { useAuth } from './useAuth';\r\nimport { isSupabaseConfigured } from '../lib/supabaseClient';\r\nimport { addFavoriteItem, fetchMyFavorites, removeFavoriteItem } from '../services/api';\r\n\r\ninterface FavoritesContextType {\r\n  favorites: Favorite[];\r\n  addFavorite: (type: 'event' | 'dancer' | 'contractor', itemId: string) => void;\r\n  removeFavorite: (type: 'event' | 'dancer' | 'contractor', itemId: string) => void;\r\n  isFavorite: (type: 'event' | 'dancer' | 'contractor', itemId: string) => boolean;\r\n  getFavoritesByType: (type: 'event' | 'dancer' | 'contractor') => Favorite[];\r\n}\r\n\r\nconst FavoritesContext = createContext<FavoritesContextType | undefined>(undefined);\r\n\r\nexport function FavoritesProvider({ children }: { children: ReactNode }) {\r\n  const [favorites, setFavorites] = useState<Favorite[]>([]);\r\n  const { isAuthenticated } = useAuth();\r\n\r\n  useEffect(() => {\r\n    const load = async () => {\r\n      if (isSupabaseConfigured && isAuthenticated) {\r\n        try {\r\n          const rows = await fetchMyFavorites();\r\n          setFavorites(rows);\r\n          try { localStorage.setItem('artistpro_favorites', JSON.stringify(rows)); } catch {}\r\n          return;\r\n        } catch (e) {\r\n          console.error('Erro ao buscar favoritos do Supabase, usando localStorage', e);\r\n        }\r\n      }\r\n      // Fallback localStorage (migração de danz_* para artistpro_*)\r\n      const savedFavorites = localStorage.getItem('artistpro_favorites') || localStorage.getItem('danz_favorites');\r\n      if (savedFavorites) {\r\n        try {\r\n          setFavorites(JSON.parse(savedFavorites));\r\n        } catch (error) {\r\n          console.error('Erro ao carregar favoritos:', error);\r\n        }\r\n      } else {\r\n        setFavorites([]);\r\n      }\r\n    };\r\n    load();\r\n  }, [isAuthenticated]);\r\n\r\n  useEffect(() => {\r\n    // Salvar favoritos no localStorage usando nova chave\r\n    localStorage.setItem('artistpro_favorites', JSON.stringify(favorites));\r\n  }, [favorites]);\r\n\r\n  const addFavorite = async (type: 'event' | 'dancer' | 'contractor', itemId: string) => {\r\n    if (isSupabaseConfigured && isAuthenticated) {\r\n      const created = await addFavoriteItem(type, itemId);\r\n      if (created) {\r\n        setFavorites(prev => {\r\n          const exists = prev.some(f => f.type === created.type && f.itemId === created.itemId);\r\n          if (exists) return prev;\r\n          return [created, ...prev];\r\n        });\r\n      }\r\n      return;\r\n    }\r\n    const newFavorite: Favorite = {\r\n      id: Date.now().toString(),\r\n      userId: 'current_user',\r\n      type,\r\n      itemId,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    setFavorites(prev => {\r\n      const exists = prev.some(fav => fav.type === type && fav.itemId === itemId);\r\n      if (exists) return prev;\r\n      return [newFavorite, ...prev];\r\n    });\r\n  };\r\n\r\n  const removeFavorite = async (type: 'event' | 'dancer' | 'contractor', itemId: string) => {\r\n    if (isSupabaseConfigured && isAuthenticated) {\r\n      const ok = await removeFavoriteItem(type, itemId);\r\n      if (ok) {\r\n        setFavorites(prev => prev.filter(fav => !(fav.type === type && fav.itemId === itemId)));\r\n      }\r\n      return;\r\n    }\r\n    setFavorites(prev => prev.filter(fav => !(fav.type === type && fav.itemId === itemId)));\r\n  };\r\n\r\n  const isFavorite = (type: 'event' | 'dancer' | 'contractor', itemId: string): boolean => {\r\n    return favorites.some(fav => fav.type === type && fav.itemId === itemId);\r\n  };\r\n\r\n  const getFavoritesByType = (type: 'event' | 'dancer' | 'contractor'): Favorite[] => {\r\n    return favorites.filter(fav => fav.type === type);\r\n  };\r\n\r\n  return (\r\n    <FavoritesContext.Provider value={{\r\n      favorites,\r\n      addFavorite,\r\n      removeFavorite,\r\n      isFavorite,\r\n      getFavoritesByType\r\n    }}>\r\n      {children}\r\n    </FavoritesContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useFavorites() {\r\n  const context = useContext(FavoritesContext);\r\n  if (context === undefined) {\r\n    throw new Error('useFavorites must be used within a FavoritesProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}