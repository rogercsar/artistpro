{"ast":null,"code":"import { supabase, isSupabaseConfigured } from '../lib/supabaseClient';\nimport { mockEvents, mockDancerProfiles, mockContractorProfiles } from '../data/mockData';\nexport async function fetchEvents(category) {\n  if (!isSupabaseConfigured) return mockEvents;\n  let query = supabase.from('events_view').select('*').order('date', {\n    ascending: true\n  });\n  if (category) query = query.eq('category', category);\n  const {\n    data,\n    error\n  } = await query;\n  if (error) {\n    console.error('fetchEvents error', error);\n    return mockEvents;\n  }\n  return data;\n}\nexport async function fetchEventById(id) {\n  if (!isSupabaseConfigured) return mockEvents.find(e => e.id === id);\n  const {\n    data,\n    error\n  } = await supabase.from('events_view').select('*').eq('id', id).single();\n  if (error) {\n    console.error('fetchEventById error', error);\n    return mockEvents.find(e => e.id === id);\n  }\n  return data;\n}\nexport async function fetchDancers(category = 'dance') {\n  if (!isSupabaseConfigured) return mockDancerProfiles;\n  const {\n    data,\n    error\n  } = await supabase.from('profiles_view').select('*').eq('role', 'artist').eq('category', category).order('created_at', {\n    ascending: false\n  });\n  if (error) {\n    console.error('fetchDancers error', error);\n    return mockDancerProfiles;\n  }\n  // Garantir compatibilidade mínima com DancerProfile esperado no front\n  const mapped = data.map(p => ({\n    id: p.id,\n    email: p.email || '',\n    name: p.name || '',\n    type: 'dancer',\n    level: p.level || 'basic',\n    avatar: p.avatar_url || undefined,\n    bio: p.bio || undefined,\n    location: p.location || undefined,\n    website: p.website || undefined,\n    socialMedia: p.social_media || undefined,\n    isVerified: !!p.is_verified,\n    createdAt: p.created_at,\n    skills: [],\n    portfolio: {\n      photos: p.portfolio_photos || [],\n      videos: p.portfolio_videos || []\n    },\n    availability: {},\n    experience: '',\n    danceStyles: [],\n    reviews: [],\n    rating: Number(p.rating || 0)\n  }));\n  return mapped;\n}\nexport async function fetchContractors(category) {\n  if (!isSupabaseConfigured) return mockContractorProfiles;\n  let query = supabase.from('profiles_view').select('*').eq('role', 'contractor').order('created_at', {\n    ascending: false\n  });\n  if (category) query = query.eq('contractor_category', category);\n  const {\n    data,\n    error\n  } = await query;\n  if (error) {\n    console.error('fetchContractors error', error);\n    return mockContractorProfiles;\n  }\n  const mapped = data.map(p => ({\n    id: p.id,\n    email: p.email || '',\n    name: p.name || '',\n    type: 'contractor',\n    level: p.level || 'basic',\n    avatar: p.avatar_url || undefined,\n    bio: p.bio || undefined,\n    location: p.location || undefined,\n    website: p.website || undefined,\n    isVerified: !!p.is_verified,\n    createdAt: p.created_at,\n    companyName: p.name || '',\n    companyLogo: p.avatar_url || undefined,\n    companyDescription: p.bio || undefined,\n    events: [],\n    reviews: [],\n    rating: Number(p.rating || 0)\n  }));\n  return mapped;\n}\nexport async function createEvent(payload) {\n  if (!isSupabaseConfigured) return {\n    ok: false,\n    error: 'Supabase not configured'\n  };\n  const {\n    data,\n    error\n  } = await supabase.from('events').insert(payload).select('id').single();\n  if (error) return {\n    ok: false,\n    error\n  };\n  return {\n    ok: true,\n    id: data.id\n  };\n}\nexport async function upsertProfile(id, payload) {\n  if (!isSupabaseConfigured) return {\n    ok: false,\n    error: 'Supabase not configured'\n  };\n  const {\n    error\n  } = await supabase.from('profiles').upsert({\n    id,\n    ...payload\n  }).eq('id', id);\n  if (error) return {\n    ok: false,\n    error\n  };\n  return {\n    ok: true\n  };\n}","map":{"version":3,"names":["supabase","isSupabaseConfigured","mockEvents","mockDancerProfiles","mockContractorProfiles","fetchEvents","category","query","from","select","order","ascending","eq","data","error","console","fetchEventById","id","find","e","single","fetchDancers","mapped","map","p","email","name","type","level","avatar","avatar_url","undefined","bio","location","website","socialMedia","social_media","isVerified","is_verified","createdAt","created_at","skills","portfolio","photos","portfolio_photos","videos","portfolio_videos","availability","experience","danceStyles","reviews","rating","Number","fetchContractors","companyName","companyLogo","companyDescription","events","createEvent","payload","ok","insert","upsertProfile","upsert"],"sources":["C:/Users/Home/Documents/Documents/Eng Software/danz/src/services/api.ts"],"sourcesContent":["import { supabase, isSupabaseConfigured } from '../lib/supabaseClient';\nimport { Event, DancerProfile, ContractorProfile, User } from '../types';\nimport { mockEvents, mockDancerProfiles, mockContractorProfiles } from '../data/mockData';\n\nexport async function fetchEvents(category?: 'dance' | 'theater' | 'clowning' | 'music'): Promise<Event[]> {\n  if (!isSupabaseConfigured) return mockEvents;\n  let query = supabase.from('events_view').select('*').order('date', { ascending: true });\n  if (category) query = query.eq('category', category);\n  const { data, error } = await query as any;\n  if (error) {\n    console.error('fetchEvents error', error);\n    return mockEvents;\n  }\n  return (data as any[]) as Event[];\n}\n\nexport async function fetchEventById(id: string): Promise<Event | undefined> {\n  if (!isSupabaseConfigured) return mockEvents.find(e => e.id === id);\n  const { data, error } = await supabase\n    .from('events_view')\n    .select('*')\n    .eq('id', id)\n    .single();\n  if (error) {\n    console.error('fetchEventById error', error);\n    return mockEvents.find(e => e.id === id);\n  }\n  return data as any as Event;\n}\n\nexport async function fetchDancers(category: 'dance' | 'theater' | 'clowning' | 'music' = 'dance'): Promise<DancerProfile[]> {\n  if (!isSupabaseConfigured) return mockDancerProfiles;\n  const { data, error } = await supabase\n    .from('profiles_view')\n    .select('*')\n    .eq('role', 'artist')\n    .eq('category', category)\n    .order('created_at', { ascending: false });\n  if (error) {\n    console.error('fetchDancers error', error);\n    return mockDancerProfiles;\n  }\n  // Garantir compatibilidade mínima com DancerProfile esperado no front\n  const mapped = (data as any[]).map((p: any) => ({\n    id: p.id,\n    email: p.email || '',\n    name: p.name || '',\n    type: 'dancer',\n    level: (p.level as any) || 'basic',\n    avatar: p.avatar_url || undefined,\n    bio: p.bio || undefined,\n    location: p.location || undefined,\n    website: p.website || undefined,\n    socialMedia: p.social_media || undefined,\n    isVerified: !!p.is_verified,\n    createdAt: p.created_at,\n    skills: [],\n    portfolio: { photos: p.portfolio_photos || [], videos: p.portfolio_videos || [] },\n    availability: {},\n    experience: '',\n    danceStyles: [],\n    reviews: [],\n    rating: Number(p.rating || 0)\n  })) as DancerProfile[];\n  return mapped;\n}\n\nexport async function fetchContractors(category?: 'dance' | 'theater' | 'clowning' | 'music'): Promise<ContractorProfile[]> {\n  if (!isSupabaseConfigured) return mockContractorProfiles;\n  let query = supabase\n    .from('profiles_view')\n    .select('*')\n    .eq('role', 'contractor')\n    .order('created_at', { ascending: false }) as any;\n  if (category) query = query.eq('contractor_category', category);\n  const { data, error } = await query;\n  if (error) {\n    console.error('fetchContractors error', error);\n    return mockContractorProfiles;\n  }\n  const mapped = (data as any[]).map((p: any) => ({\n    id: p.id,\n    email: p.email || '',\n    name: p.name || '',\n    type: 'contractor',\n    level: (p.level as any) || 'basic',\n    avatar: p.avatar_url || undefined,\n    bio: p.bio || undefined,\n    location: p.location || undefined,\n    website: p.website || undefined,\n    isVerified: !!p.is_verified,\n    createdAt: p.created_at,\n    companyName: p.name || '',\n    companyLogo: p.avatar_url || undefined,\n    companyDescription: p.bio || undefined,\n    events: [],\n    reviews: [],\n    rating: Number(p.rating || 0)\n  })) as ContractorProfile[];\n  return mapped;\n}\n\nexport async function createEvent(payload: any): Promise<{ ok: boolean; id?: string; error?: any }>{\n  if (!isSupabaseConfigured) return { ok: false, error: 'Supabase not configured' };\n  const { data, error } = await supabase\n    .from('events')\n    .insert(payload)\n    .select('id')\n    .single();\n  if (error) return { ok: false, error };\n  return { ok: true, id: (data as any).id };\n}\n\nexport async function upsertProfile(id: string, payload: Partial<User>): Promise<{ ok: boolean; error?: any }>{\n  if (!isSupabaseConfigured) return { ok: false, error: 'Supabase not configured' };\n  const { error } = await supabase\n    .from('profiles')\n    .upsert({ id, ...payload })\n    .eq('id', id);\n  if (error) return { ok: false, error };\n  return { ok: true };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}