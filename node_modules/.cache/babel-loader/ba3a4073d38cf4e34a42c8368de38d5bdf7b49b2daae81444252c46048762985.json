{"ast":null,"code":"import { supabase, isSupabaseConfigured } from '../lib/supabaseClient';\nimport { mockEvents, mockDancerProfiles, mockContractorProfiles } from '../data/mockData';\nexport async function fetchEvents() {\n  if (!isSupabaseConfigured) return mockEvents;\n  const {\n    data,\n    error\n  } = await supabase.from('events_view').select('*').order('date', {\n    ascending: true\n  });\n  if (error) {\n    console.error('fetchEvents error', error);\n    return mockEvents;\n  }\n  return data;\n}\nexport async function fetchEventById(id) {\n  if (!isSupabaseConfigured) return mockEvents.find(e => e.id === id);\n  const {\n    data,\n    error\n  } = await supabase.from('events_view').select('*').eq('id', id).single();\n  if (error) {\n    console.error('fetchEventById error', error);\n    return mockEvents.find(e => e.id === id);\n  }\n  return data;\n}\nexport async function fetchDancers() {\n  if (!isSupabaseConfigured) return mockDancerProfiles;\n  const {\n    data,\n    error\n  } = await supabase.from('profiles_view').select('*').eq('role', 'artist').eq('category', 'dance').order('created_at', {\n    ascending: false\n  });\n  if (error) {\n    console.error('fetchDancers error', error);\n    return mockDancerProfiles;\n  }\n  return data;\n}\nexport async function fetchContractors() {\n  if (!isSupabaseConfigured) return mockContractorProfiles;\n  const {\n    data,\n    error\n  } = await supabase.from('profiles_view').select('*').eq('role', 'contractor').order('created_at', {\n    ascending: false\n  });\n  if (error) {\n    console.error('fetchContractors error', error);\n    return mockContractorProfiles;\n  }\n  return data;\n}\nexport async function createEvent(payload) {\n  if (!isSupabaseConfigured) return {\n    ok: false,\n    error: 'Supabase not configured'\n  };\n  const {\n    data,\n    error\n  } = await supabase.from('events').insert(payload).select('id').single();\n  if (error) return {\n    ok: false,\n    error\n  };\n  return {\n    ok: true,\n    id: data.id\n  };\n}\nexport async function upsertProfile(id, payload) {\n  if (!isSupabaseConfigured) return {\n    ok: false,\n    error: 'Supabase not configured'\n  };\n  const {\n    error\n  } = await supabase.from('profiles').upsert({\n    id,\n    ...payload\n  }).eq('id', id);\n  if (error) return {\n    ok: false,\n    error\n  };\n  return {\n    ok: true\n  };\n}","map":{"version":3,"names":["supabase","isSupabaseConfigured","mockEvents","mockDancerProfiles","mockContractorProfiles","fetchEvents","data","error","from","select","order","ascending","console","fetchEventById","id","find","e","eq","single","fetchDancers","fetchContractors","createEvent","payload","ok","insert","upsertProfile","upsert"],"sources":["C:/Users/Home/Documents/Documents/Eng Software/danz/src/services/api.ts"],"sourcesContent":["import { supabase, isSupabaseConfigured } from '../lib/supabaseClient';\nimport { Event, DancerProfile, ContractorProfile, User } from '../types';\nimport { mockEvents, mockDancerProfiles, mockContractorProfiles } from '../data/mockData';\n\nexport async function fetchEvents(): Promise<Event[]> {\n  if (!isSupabaseConfigured) return mockEvents;\n  const { data, error } = await supabase\n    .from('events_view')\n    .select('*')\n    .order('date', { ascending: true });\n  if (error) {\n    console.error('fetchEvents error', error);\n    return mockEvents;\n  }\n  return (data as any[]) as Event[];\n}\n\nexport async function fetchEventById(id: string): Promise<Event | undefined> {\n  if (!isSupabaseConfigured) return mockEvents.find(e => e.id === id);\n  const { data, error } = await supabase\n    .from('events_view')\n    .select('*')\n    .eq('id', id)\n    .single();\n  if (error) {\n    console.error('fetchEventById error', error);\n    return mockEvents.find(e => e.id === id);\n  }\n  return data as any as Event;\n}\n\nexport async function fetchDancers(): Promise<DancerProfile[]> {\n  if (!isSupabaseConfigured) return mockDancerProfiles;\n  const { data, error } = await supabase\n    .from('profiles_view')\n    .select('*')\n    .eq('role', 'artist')\n    .eq('category', 'dance')\n    .order('created_at', { ascending: false });\n  if (error) {\n    console.error('fetchDancers error', error);\n    return mockDancerProfiles;\n  }\n  return (data as any[]) as DancerProfile[];\n}\n\nexport async function fetchContractors(): Promise<ContractorProfile[]> {\n  if (!isSupabaseConfigured) return mockContractorProfiles;\n  const { data, error } = await supabase\n    .from('profiles_view')\n    .select('*')\n    .eq('role', 'contractor')\n    .order('created_at', { ascending: false });\n  if (error) {\n    console.error('fetchContractors error', error);\n    return mockContractorProfiles;\n  }\n  return (data as any[]) as ContractorProfile[];\n}\n\nexport async function createEvent(payload: Partial<Event>): Promise<{ ok: boolean; id?: string; error?: any }>{\n  if (!isSupabaseConfigured) return { ok: false, error: 'Supabase not configured' };\n  const { data, error } = await supabase\n    .from('events')\n    .insert(payload)\n    .select('id')\n    .single();\n  if (error) return { ok: false, error };\n  return { ok: true, id: (data as any).id };\n}\n\nexport async function upsertProfile(id: string, payload: Partial<User>): Promise<{ ok: boolean; error?: any }>{\n  if (!isSupabaseConfigured) return { ok: false, error: 'Supabase not configured' };\n  const { error } = await supabase\n    .from('profiles')\n    .upsert({ id, ...payload })\n    .eq('id', id);\n  if (error) return { ok: false, error };\n  return { ok: true };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}