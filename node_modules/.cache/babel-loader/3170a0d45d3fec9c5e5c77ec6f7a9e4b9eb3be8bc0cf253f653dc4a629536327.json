{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { _generateLinkResponse, _noResolveJsonResponse, _request, _userResponse } from './lib/fetch';\nimport { resolveFetch, validateUUID } from './lib/helpers';\nimport { SIGN_OUT_SCOPES } from './lib/types';\nimport { isAuthError } from './lib/errors';\nexport default class GoTrueAdminApi {\n  constructor(_ref) {\n    let {\n      url = '',\n      headers = {},\n      fetch\n    } = _ref;\n    this.url = url;\n    this.headers = headers;\n    this.fetch = resolveFetch(fetch);\n    this.mfa = {\n      listFactors: this._listFactors.bind(this),\n      deleteFactor: this._deleteFactor.bind(this)\n    };\n    this.oauth = {\n      listClients: this._listOAuthClients.bind(this),\n      createClient: this._createOAuthClient.bind(this),\n      getClient: this._getOAuthClient.bind(this),\n      deleteClient: this._deleteOAuthClient.bind(this),\n      regenerateClientSecret: this._regenerateOAuthClientSecret.bind(this)\n    };\n  }\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   * @param scope The logout sope.\n   */\n  async signOut(jwt) {\n    let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SIGN_OUT_SCOPES[0];\n    if (SIGN_OUT_SCOPES.indexOf(scope) < 0) {\n      throw new Error(\"@supabase/auth-js: Parameter scope must be one of \".concat(SIGN_OUT_SCOPES.join(', ')));\n    }\n    try {\n      await _request(this.fetch, 'POST', \"\".concat(this.url, \"/logout?scope=\").concat(scope), {\n        headers: this.headers,\n        jwt,\n        noResolveJson: true\n      });\n      return {\n        data: null,\n        error: null\n      };\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: null,\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param options Additional options to be included when inviting.\n   */\n  async inviteUserByEmail(email) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    try {\n      return await _request(this.fetch, 'POST', \"\".concat(this.url, \"/invite\"), {\n        body: {\n          email,\n          data: options.data\n        },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n        xform: _userResponse\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            user: null\n          },\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  /**\n   * Generates email links and OTPs to be sent via a custom email provider.\n   * @param email The user's email.\n   * @param options.password User password. For signup only.\n   * @param options.data Optional user metadata. For signup only.\n   * @param options.redirectTo The redirect url which should be appended to the generated link\n   */\n  async generateLink(params) {\n    try {\n      const {\n          options\n        } = params,\n        rest = __rest(params, [\"options\"]);\n      const body = Object.assign(Object.assign({}, rest), options);\n      if ('newEmail' in rest) {\n        // replace newEmail with new_email in request body\n        body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;\n        delete body['newEmail'];\n      }\n      return await _request(this.fetch, 'POST', \"\".concat(this.url, \"/admin/generate_link\"), {\n        body: body,\n        headers: this.headers,\n        xform: _generateLinkResponse,\n        redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            properties: null,\n            user: null\n          },\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  // User Admin API\n  /**\n   * Creates a new user.\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async createUser(attributes) {\n    try {\n      return await _request(this.fetch, 'POST', \"\".concat(this.url, \"/admin/users\"), {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            user: null\n          },\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n   */\n  async listUsers(params) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    try {\n      const pagination = {\n        nextPage: null,\n        lastPage: 0,\n        total: 0\n      };\n      const response = await _request(this.fetch, 'GET', \"\".concat(this.url, \"/admin/users\"), {\n        headers: this.headers,\n        noResolveJson: true,\n        query: {\n          page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '',\n          per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''\n        },\n        xform: _noResolveJsonResponse\n      });\n      if (response.error) throw response.error;\n      const users = await response.json();\n      const total = (_e = response.headers.get('x-total-count')) !== null && _e !== void 0 ? _e : 0;\n      const links = (_g = (_f = response.headers.get('link')) === null || _f === void 0 ? void 0 : _f.split(',')) !== null && _g !== void 0 ? _g : [];\n      if (links.length > 0) {\n        links.forEach(link => {\n          const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1));\n          const rel = JSON.parse(link.split(';')[1].split('=')[1]);\n          pagination[\"\".concat(rel, \"Page\")] = page;\n        });\n        pagination.total = parseInt(total);\n      }\n      return {\n        data: Object.assign(Object.assign({}, users), pagination),\n        error: null\n      };\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            users: []\n          },\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async getUserById(uid) {\n    validateUUID(uid);\n    try {\n      return await _request(this.fetch, 'GET', \"\".concat(this.url, \"/admin/users/\").concat(uid), {\n        headers: this.headers,\n        xform: _userResponse\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            user: null\n          },\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async updateUserById(uid, attributes) {\n    validateUUID(uid);\n    try {\n      return await _request(this.fetch, 'PUT', \"\".concat(this.url, \"/admin/users/\").concat(uid), {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            user: null\n          },\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * @param id The user id you want to remove.\n   * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema. Soft deletion allows user identification from the hashed user ID but is not reversible.\n   * Defaults to false for backward compatibility.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async deleteUser(id) {\n    let shouldSoftDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    validateUUID(id);\n    try {\n      return await _request(this.fetch, 'DELETE', \"\".concat(this.url, \"/admin/users/\").concat(id), {\n        headers: this.headers,\n        body: {\n          should_soft_delete: shouldSoftDelete\n        },\n        xform: _userResponse\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            user: null\n          },\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  async _listFactors(params) {\n    validateUUID(params.userId);\n    try {\n      const {\n        data,\n        error\n      } = await _request(this.fetch, 'GET', \"\".concat(this.url, \"/admin/users/\").concat(params.userId, \"/factors\"), {\n        headers: this.headers,\n        xform: factors => {\n          return {\n            data: {\n              factors\n            },\n            error: null\n          };\n        }\n      });\n      return {\n        data,\n        error\n      };\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: null,\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  async _deleteFactor(params) {\n    validateUUID(params.userId);\n    validateUUID(params.id);\n    try {\n      const data = await _request(this.fetch, 'DELETE', \"\".concat(this.url, \"/admin/users/\").concat(params.userId, \"/factors/\").concat(params.id), {\n        headers: this.headers\n      });\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: null,\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  /**\n   * Lists all OAuth clients with optional pagination.\n   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async _listOAuthClients(params) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    try {\n      const pagination = {\n        nextPage: null,\n        lastPage: 0,\n        total: 0\n      };\n      const response = await _request(this.fetch, 'GET', \"\".concat(this.url, \"/admin/oauth/clients\"), {\n        headers: this.headers,\n        noResolveJson: true,\n        query: {\n          page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '',\n          per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''\n        },\n        xform: _noResolveJsonResponse\n      });\n      if (response.error) throw response.error;\n      const clients = await response.json();\n      const total = (_e = response.headers.get('x-total-count')) !== null && _e !== void 0 ? _e : 0;\n      const links = (_g = (_f = response.headers.get('link')) === null || _f === void 0 ? void 0 : _f.split(',')) !== null && _g !== void 0 ? _g : [];\n      if (links.length > 0) {\n        links.forEach(link => {\n          const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1));\n          const rel = JSON.parse(link.split(';')[1].split('=')[1]);\n          pagination[\"\".concat(rel, \"Page\")] = page;\n        });\n        pagination.total = parseInt(total);\n      }\n      return {\n        data: Object.assign(Object.assign({}, clients), pagination),\n        error: null\n      };\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            clients: []\n          },\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  /**\n   * Creates a new OAuth client.\n   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async _createOAuthClient(params) {\n    try {\n      return await _request(this.fetch, 'POST', \"\".concat(this.url, \"/admin/oauth/clients\"), {\n        body: params,\n        headers: this.headers,\n        xform: client => {\n          return {\n            data: client,\n            error: null\n          };\n        }\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: null,\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  /**\n   * Gets details of a specific OAuth client.\n   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async _getOAuthClient(clientId) {\n    try {\n      return await _request(this.fetch, 'GET', \"\".concat(this.url, \"/admin/oauth/clients/\").concat(clientId), {\n        headers: this.headers,\n        xform: client => {\n          return {\n            data: client,\n            error: null\n          };\n        }\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: null,\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  /**\n   * Deletes an OAuth client.\n   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async _deleteOAuthClient(clientId) {\n    try {\n      return await _request(this.fetch, 'DELETE', \"\".concat(this.url, \"/admin/oauth/clients/\").concat(clientId), {\n        headers: this.headers,\n        xform: client => {\n          return {\n            data: client,\n            error: null\n          };\n        }\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: null,\n          error\n        };\n      }\n      throw error;\n    }\n  }\n  /**\n   * Regenerates the secret for an OAuth client.\n   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async _regenerateOAuthClientSecret(clientId) {\n    try {\n      return await _request(this.fetch, 'POST', \"\".concat(this.url, \"/admin/oauth/clients/\").concat(clientId, \"/regenerate_secret\"), {\n        headers: this.headers,\n        xform: client => {\n          return {\n            data: client,\n            error: null\n          };\n        }\n      });\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: null,\n          error\n        };\n      }\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["_generateLinkResponse","_noResolveJsonResponse","_request","_userResponse","resolveFetch","validateUUID","SIGN_OUT_SCOPES","isAuthError","GoTrueAdminApi","constructor","_ref","url","headers","fetch","mfa","listFactors","_listFactors","bind","deleteFactor","_deleteFactor","oauth","listClients","_listOAuthClients","createClient","_createOAuthClient","getClient","_getOAuthClient","deleteClient","_deleteOAuthClient","regenerateClientSecret","_regenerateOAuthClientSecret","signOut","jwt","scope","arguments","length","undefined","indexOf","Error","concat","join","noResolveJson","data","error","inviteUserByEmail","email","options","body","redirectTo","xform","user","generateLink","params","rest","__rest","Object","assign","new_email","newEmail","properties","createUser","attributes","listUsers","pagination","nextPage","lastPage","total","response","query","page","_b","_a","toString","per_page","_d","_c","perPage","users","json","_e","get","links","_g","_f","split","forEach","link","parseInt","substring","rel","JSON","parse","getUserById","uid","updateUserById","deleteUser","id","shouldSoftDelete","should_soft_delete","userId","factors","clients","client","clientId"],"sources":["C:\\Users\\Home\\Documents\\Documents\\Eng Software\\danz\\node_modules\\@supabase\\auth-js\\src\\GoTrueAdminApi.ts"],"sourcesContent":["import {\n  Fetch,\n  _generateLinkResponse,\n  _noResolveJsonResponse,\n  _request,\n  _userResponse,\n} from './lib/fetch'\nimport { resolveFetch, validateUUID } from './lib/helpers'\nimport {\n  AdminUserAttributes,\n  GenerateLinkParams,\n  GenerateLinkResponse,\n  Pagination,\n  User,\n  UserResponse,\n  GoTrueAdminMFAApi,\n  AuthMFAAdminDeleteFactorParams,\n  AuthMFAAdminDeleteFactorResponse,\n  AuthMFAAdminListFactorsParams,\n  AuthMFAAdminListFactorsResponse,\n  PageParams,\n  SIGN_OUT_SCOPES,\n  SignOutScope,\n  GoTrueAdminOAuthApi,\n  CreateOAuthClientParams,\n  OAuthClientResponse,\n  OAuthClientListResponse,\n} from './lib/types'\nimport { AuthError, isAuthError } from './lib/errors'\n\nexport default class GoTrueAdminApi {\n  /** Contains all MFA administration methods. */\n  mfa: GoTrueAdminMFAApi\n\n  /**\n   * Contains all OAuth client administration methods.\n   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\n   */\n  oauth: GoTrueAdminOAuthApi\n\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  constructor({\n    url = '',\n    headers = {},\n    fetch,\n  }: {\n    url: string\n    headers?: {\n      [key: string]: string\n    }\n    fetch?: Fetch\n  }) {\n    this.url = url\n    this.headers = headers\n    this.fetch = resolveFetch(fetch)\n    this.mfa = {\n      listFactors: this._listFactors.bind(this),\n      deleteFactor: this._deleteFactor.bind(this),\n    }\n    this.oauth = {\n      listClients: this._listOAuthClients.bind(this),\n      createClient: this._createOAuthClient.bind(this),\n      getClient: this._getOAuthClient.bind(this),\n      deleteClient: this._deleteOAuthClient.bind(this),\n      regenerateClientSecret: this._regenerateOAuthClientSecret.bind(this),\n    }\n  }\n\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   * @param scope The logout sope.\n   */\n  async signOut(\n    jwt: string,\n    scope: SignOutScope = SIGN_OUT_SCOPES[0]\n  ): Promise<{ data: null; error: AuthError | null }> {\n    if (SIGN_OUT_SCOPES.indexOf(scope) < 0) {\n      throw new Error(\n        `@supabase/auth-js: Parameter scope must be one of ${SIGN_OUT_SCOPES.join(', ')}`\n      )\n    }\n\n    try {\n      await _request(this.fetch, 'POST', `${this.url}/logout?scope=${scope}`, {\n        headers: this.headers,\n        jwt,\n        noResolveJson: true,\n      })\n      return { data: null, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param options Additional options to be included when inviting.\n   */\n  async inviteUserByEmail(\n    email: string,\n    options: {\n      /** A custom data object to store additional metadata about the user. This maps to the `auth.users.user_metadata` column. */\n      data?: object\n\n      /** The URL which will be appended to the email link sent to the user's email address. Once clicked the user will end up on this URL. */\n      redirectTo?: string\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/invite`, {\n        body: { email, data: options.data },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates email links and OTPs to be sent via a custom email provider.\n   * @param email The user's email.\n   * @param options.password User password. For signup only.\n   * @param options.data Optional user metadata. For signup only.\n   * @param options.redirectTo The redirect url which should be appended to the generated link\n   */\n  async generateLink(params: GenerateLinkParams): Promise<GenerateLinkResponse> {\n    try {\n      const { options, ...rest } = params\n      const body: any = { ...rest, ...options }\n      if ('newEmail' in rest) {\n        // replace newEmail with new_email in request body\n        body.new_email = rest?.newEmail\n        delete body['newEmail']\n      }\n      return await _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n        body: body,\n        headers: this.headers,\n        xform: _generateLinkResponse,\n        redirectTo: options?.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            properties: null,\n            user: null,\n          },\n          error,\n        }\n      }\n      throw error\n    }\n  }\n\n  // User Admin API\n  /**\n   * Creates a new user.\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async createUser(attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n   */\n  async listUsers(\n    params?: PageParams\n  ): Promise<\n    | { data: { users: User[]; aud: string } & Pagination; error: null }\n    | { data: { users: [] }; error: AuthError }\n  > {\n    try {\n      const pagination: Pagination = { nextPage: null, lastPage: 0, total: 0 }\n      const response = await _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n        headers: this.headers,\n        noResolveJson: true,\n        query: {\n          page: params?.page?.toString() ?? '',\n          per_page: params?.perPage?.toString() ?? '',\n        },\n        xform: _noResolveJsonResponse,\n      })\n      if (response.error) throw response.error\n\n      const users = await response.json()\n      const total = response.headers.get('x-total-count') ?? 0\n      const links = response.headers.get('link')?.split(',') ?? []\n      if (links.length > 0) {\n        links.forEach((link: string) => {\n          const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1))\n          const rel = JSON.parse(link.split(';')[1].split('=')[1])\n          pagination[`${rel}Page`] = page\n        })\n\n        pagination.total = parseInt(total)\n      }\n      return { data: { ...users, ...pagination }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { users: [] }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async getUserById(uid: string): Promise<UserResponse> {\n    validateUUID(uid)\n\n    try {\n      return await _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async updateUserById(uid: string, attributes: AdminUserAttributes): Promise<UserResponse> {\n    validateUUID(uid)\n\n    try {\n      return await _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * @param id The user id you want to remove.\n   * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema. Soft deletion allows user identification from the hashed user ID but is not reversible.\n   * Defaults to false for backward compatibility.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async deleteUser(id: string, shouldSoftDelete = false): Promise<UserResponse> {\n    validateUUID(id)\n\n    try {\n      return await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n        headers: this.headers,\n        body: {\n          should_soft_delete: shouldSoftDelete,\n        },\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _listFactors(\n    params: AuthMFAAdminListFactorsParams\n  ): Promise<AuthMFAAdminListFactorsResponse> {\n    validateUUID(params.userId)\n\n    try {\n      const { data, error } = await _request(\n        this.fetch,\n        'GET',\n        `${this.url}/admin/users/${params.userId}/factors`,\n        {\n          headers: this.headers,\n          xform: (factors: any) => {\n            return { data: { factors }, error: null }\n          },\n        }\n      )\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _deleteFactor(\n    params: AuthMFAAdminDeleteFactorParams\n  ): Promise<AuthMFAAdminDeleteFactorResponse> {\n    validateUUID(params.userId)\n    validateUUID(params.id)\n\n    try {\n      const data = await _request(\n        this.fetch,\n        'DELETE',\n        `${this.url}/admin/users/${params.userId}/factors/${params.id}`,\n        {\n          headers: this.headers,\n        }\n      )\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Lists all OAuth clients with optional pagination.\n   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  private async _listOAuthClients(params?: PageParams): Promise<OAuthClientListResponse> {\n    try {\n      const pagination: Pagination = { nextPage: null, lastPage: 0, total: 0 }\n      const response = await _request(this.fetch, 'GET', `${this.url}/admin/oauth/clients`, {\n        headers: this.headers,\n        noResolveJson: true,\n        query: {\n          page: params?.page?.toString() ?? '',\n          per_page: params?.perPage?.toString() ?? '',\n        },\n        xform: _noResolveJsonResponse,\n      })\n      if (response.error) throw response.error\n\n      const clients = await response.json()\n      const total = response.headers.get('x-total-count') ?? 0\n      const links = response.headers.get('link')?.split(',') ?? []\n      if (links.length > 0) {\n        links.forEach((link: string) => {\n          const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1))\n          const rel = JSON.parse(link.split(';')[1].split('=')[1])\n          pagination[`${rel}Page`] = page\n        })\n\n        pagination.total = parseInt(total)\n      }\n      return { data: { ...clients, ...pagination }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { clients: [] }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Creates a new OAuth client.\n   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  private async _createOAuthClient(\n    params: CreateOAuthClientParams\n  ): Promise<OAuthClientResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/admin/oauth/clients`, {\n        body: params,\n        headers: this.headers,\n        xform: (client: any) => {\n          return { data: client, error: null }\n        },\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Gets details of a specific OAuth client.\n   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  private async _getOAuthClient(clientId: string): Promise<OAuthClientResponse> {\n    try {\n      return await _request(this.fetch, 'GET', `${this.url}/admin/oauth/clients/${clientId}`, {\n        headers: this.headers,\n        xform: (client: any) => {\n          return { data: client, error: null }\n        },\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Deletes an OAuth client.\n   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  private async _deleteOAuthClient(clientId: string): Promise<OAuthClientResponse> {\n    try {\n      return await _request(\n        this.fetch,\n        'DELETE',\n        `${this.url}/admin/oauth/clients/${clientId}`,\n        {\n          headers: this.headers,\n          xform: (client: any) => {\n            return { data: client, error: null }\n          },\n        }\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Regenerates the secret for an OAuth client.\n   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  private async _regenerateOAuthClientSecret(clientId: string): Promise<OAuthClientResponse> {\n    try {\n      return await _request(\n        this.fetch,\n        'POST',\n        `${this.url}/admin/oauth/clients/${clientId}/regenerate_secret`,\n        {\n          headers: this.headers,\n          xform: (client: any) => {\n            return { data: client, error: null }\n          },\n        }\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}