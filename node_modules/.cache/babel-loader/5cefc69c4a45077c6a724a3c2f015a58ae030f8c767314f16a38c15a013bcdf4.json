{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { resolveFetch } from './helper';\nimport { FunctionRegion, FunctionsFetchError, FunctionsHttpError, FunctionsRelayError } from './types';\nexport class FunctionsClient {\n  constructor(url) {\n    let {\n      headers = {},\n      customFetch,\n      region = FunctionRegion.Any\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.url = url;\n    this.headers = headers;\n    this.region = region;\n    this.fetch = resolveFetch(customFetch);\n  }\n  /**\n   * Updates the authorization header\n   * @param token - the new jwt token sent in the authorisation header\n   */\n  setAuth(token) {\n    this.headers.Authorization = \"Bearer \".concat(token);\n  }\n  /**\n   * Invokes a function\n   * @param functionName - The name of the Function to invoke.\n   * @param options - Options for invoking the Function.\n   */\n  invoke(functionName_1) {\n    return __awaiter(this, arguments, void 0, function (functionName) {\n      var _this = this;\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return function* () {\n        var _a;\n        try {\n          const {\n            headers,\n            method,\n            body: functionArgs,\n            signal\n          } = options;\n          let _headers = {};\n          let {\n            region\n          } = options;\n          if (!region) {\n            region = _this.region;\n          }\n          // Add region as query parameter using URL API\n          const url = new URL(\"\".concat(_this.url, \"/\").concat(functionName));\n          if (region && region !== 'any') {\n            _headers['x-region'] = region;\n            url.searchParams.set('forceFunctionRegion', region);\n          }\n          let body;\n          if (functionArgs && (headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type') || !headers)) {\n            if (typeof Blob !== 'undefined' && functionArgs instanceof Blob || functionArgs instanceof ArrayBuffer) {\n              // will work for File as File inherits Blob\n              // also works for ArrayBuffer as it is the same underlying structure as a Blob\n              _headers['Content-Type'] = 'application/octet-stream';\n              body = functionArgs;\n            } else if (typeof functionArgs === 'string') {\n              // plain string\n              _headers['Content-Type'] = 'text/plain';\n              body = functionArgs;\n            } else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\n              // don't set content-type headers\n              // Request will automatically add the right boundary value\n              body = functionArgs;\n            } else {\n              // default, assume this is JSON\n              _headers['Content-Type'] = 'application/json';\n              body = JSON.stringify(functionArgs);\n            }\n          }\n          const response = yield _this.fetch(url.toString(), {\n            method: method || 'POST',\n            // headers priority is (high to low):\n            // 1. invoke-level headers\n            // 2. client-level headers\n            // 3. default Content-Type header\n            headers: Object.assign(Object.assign(Object.assign({}, _headers), _this.headers), headers),\n            body,\n            signal\n          }).catch(fetchError => {\n            if (fetchError.name === 'AbortError') {\n              throw fetchError;\n            }\n            throw new FunctionsFetchError(fetchError);\n          });\n          const isRelayError = response.headers.get('x-relay-error');\n          if (isRelayError && isRelayError === 'true') {\n            throw new FunctionsRelayError(response);\n          }\n          if (!response.ok) {\n            throw new FunctionsHttpError(response);\n          }\n          let responseType = ((_a = response.headers.get('Content-Type')) !== null && _a !== void 0 ? _a : 'text/plain').split(';')[0].trim();\n          let data;\n          if (responseType === 'application/json') {\n            data = yield response.json();\n          } else if (responseType === 'application/octet-stream') {\n            data = yield response.blob();\n          } else if (responseType === 'text/event-stream') {\n            data = response;\n          } else if (responseType === 'multipart/form-data') {\n            data = yield response.formData();\n          } else {\n            // default to text\n            data = yield response.text();\n          }\n          return {\n            data,\n            error: null,\n            response\n          };\n        } catch (error) {\n          if (error instanceof Error && error.name === 'AbortError') {\n            return {\n              data: null,\n              error: new FunctionsFetchError(error)\n            };\n          }\n          return {\n            data: null,\n            error,\n            response: error instanceof FunctionsHttpError || error instanceof FunctionsRelayError ? error.context : undefined\n          };\n        }\n      }();\n    });\n  }\n}","map":{"version":3,"names":["resolveFetch","FunctionRegion","FunctionsFetchError","FunctionsHttpError","FunctionsRelayError","FunctionsClient","constructor","url","headers","customFetch","region","Any","arguments","length","undefined","fetch","setAuth","token","Authorization","concat","invoke","functionName_1","functionName","_this","options","method","body","functionArgs","signal","_headers","URL","searchParams","set","Object","prototype","hasOwnProperty","call","Blob","ArrayBuffer","FormData","JSON","stringify","response","toString","assign","catch","fetchError","name","isRelayError","get","ok","responseType","_a","split","trim","data","json","blob","formData","text","error","Error","context"],"sources":["C:\\Users\\Home\\Documents\\Documents\\Eng Software\\danz\\node_modules\\@supabase\\functions-js\\src\\FunctionsClient.ts"],"sourcesContent":["import { resolveFetch } from './helper'\nimport {\n  Fetch,\n  FunctionInvokeOptions,\n  FunctionRegion,\n  FunctionsFetchError,\n  FunctionsHttpError,\n  FunctionsRelayError,\n  FunctionsResponse,\n} from './types'\n\nexport class FunctionsClient {\n  protected url: string\n  protected headers: Record<string, string>\n  protected region: FunctionRegion\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      customFetch,\n      region = FunctionRegion.Any,\n    }: {\n      headers?: Record<string, string>\n      customFetch?: Fetch\n      region?: FunctionRegion\n    } = {}\n  ) {\n    this.url = url\n    this.headers = headers\n    this.region = region\n    this.fetch = resolveFetch(customFetch)\n  }\n\n  /**\n   * Updates the authorization header\n   * @param token - the new jwt token sent in the authorisation header\n   */\n  setAuth(token: string) {\n    this.headers.Authorization = `Bearer ${token}`\n  }\n\n  /**\n   * Invokes a function\n   * @param functionName - The name of the Function to invoke.\n   * @param options - Options for invoking the Function.\n   */\n  async invoke<T = any>(\n    functionName: string,\n    options: FunctionInvokeOptions = {}\n  ): Promise<FunctionsResponse<T>> {\n    try {\n      const { headers, method, body: functionArgs, signal } = options\n      let _headers: Record<string, string> = {}\n      let { region } = options\n      if (!region) {\n        region = this.region\n      }\n      // Add region as query parameter using URL API\n      const url = new URL(`${this.url}/${functionName}`)\n      if (region && region !== 'any') {\n        _headers['x-region'] = region\n        url.searchParams.set('forceFunctionRegion', region)\n      }\n      let body: any\n      if (\n        functionArgs &&\n        ((headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type')) || !headers)\n      ) {\n        if (\n          (typeof Blob !== 'undefined' && functionArgs instanceof Blob) ||\n          functionArgs instanceof ArrayBuffer\n        ) {\n          // will work for File as File inherits Blob\n          // also works for ArrayBuffer as it is the same underlying structure as a Blob\n          _headers['Content-Type'] = 'application/octet-stream'\n          body = functionArgs\n        } else if (typeof functionArgs === 'string') {\n          // plain string\n          _headers['Content-Type'] = 'text/plain'\n          body = functionArgs\n        } else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\n          // don't set content-type headers\n          // Request will automatically add the right boundary value\n          body = functionArgs\n        } else {\n          // default, assume this is JSON\n          _headers['Content-Type'] = 'application/json'\n          body = JSON.stringify(functionArgs)\n        }\n      }\n\n      const response = await this.fetch(url.toString(), {\n        method: method || 'POST',\n        // headers priority is (high to low):\n        // 1. invoke-level headers\n        // 2. client-level headers\n        // 3. default Content-Type header\n        headers: { ..._headers, ...this.headers, ...headers },\n        body,\n        signal,\n      }).catch((fetchError) => {\n        if (fetchError.name === 'AbortError') {\n          throw fetchError\n        }\n        throw new FunctionsFetchError(fetchError)\n      })\n\n      const isRelayError = response.headers.get('x-relay-error')\n      if (isRelayError && isRelayError === 'true') {\n        throw new FunctionsRelayError(response)\n      }\n\n      if (!response.ok) {\n        throw new FunctionsHttpError(response)\n      }\n\n      let responseType = (response.headers.get('Content-Type') ?? 'text/plain').split(';')[0].trim()\n      let data: any\n      if (responseType === 'application/json') {\n        data = await response.json()\n      } else if (responseType === 'application/octet-stream') {\n        data = await response.blob()\n      } else if (responseType === 'text/event-stream') {\n        data = response\n      } else if (responseType === 'multipart/form-data') {\n        data = await response.formData()\n      } else {\n        // default to text\n        data = await response.text()\n      }\n\n      return { data, error: null, response }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        return { data: null, error: new FunctionsFetchError(error) }\n      }\n      return {\n        data: null,\n        error,\n        response:\n          error instanceof FunctionsHttpError || error instanceof FunctionsRelayError\n            ? error.context\n            : undefined,\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}