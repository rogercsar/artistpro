{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Home\\\\Documents\\\\Documents\\\\Eng Software\\\\danz\\\\src\\\\hooks\\\\useAuth.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, createContext, useContext } from 'react';\nimport { mockUsers } from '../data/mockData';\nimport { supabase, isSupabaseConfigured } from '../lib/supabaseClient';\nimport { upsertProfile } from '../services/api';\n\n// Export vazio para tornar o arquivo um módulo\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport {};\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [authState, setAuthState] = useState({\n    user: null,\n    isAuthenticated: false,\n    isLoading: true\n  });\n  useEffect(() => {\n    if (!isSupabaseConfigured) {\n      // Simular verificação de token/sessão\n      const savedUser = localStorage.getItem('artistpro_user') || localStorage.getItem('danz_user');\n      if (savedUser) {\n        try {\n          const user = JSON.parse(savedUser);\n          setAuthState({\n            user,\n            isAuthenticated: true,\n            isLoading: false\n          });\n        } catch (error) {\n          localStorage.removeItem('danz_user');\n          localStorage.removeItem('artistpro_user');\n          setAuthState({\n            user: null,\n            isAuthenticated: false,\n            isLoading: false\n          });\n        }\n      } else {\n        setAuthState({\n          user: null,\n          isAuthenticated: false,\n          isLoading: false\n        });\n      }\n      return;\n    }\n\n    // Supabase session check\n    (async () => {\n      const {\n        data\n      } = await supabase.auth.getSession();\n      const session = data.session;\n      if (session !== null && session !== void 0 && session.user) {\n        const user = await fetchProfileAsUser(session.user.id);\n        setAuthState({\n          user,\n          isAuthenticated: true,\n          isLoading: false\n        });\n      } else {\n        setAuthState({\n          user: null,\n          isAuthenticated: false,\n          isLoading: false\n        });\n      }\n    })();\n    const {\n      data: sub\n    } = supabase.auth.onAuthStateChange(async (_event, session) => {\n      if (session !== null && session !== void 0 && session.user) {\n        const user = await fetchProfileAsUser(session.user.id);\n        setAuthState({\n          user,\n          isAuthenticated: true,\n          isLoading: false\n        });\n      } else {\n        setAuthState({\n          user: null,\n          isAuthenticated: false,\n          isLoading: false\n        });\n      }\n    });\n    return () => {\n      sub.subscription.unsubscribe();\n    };\n  }, []);\n  const login = async (email, password) => {\n    var _data$session;\n    if (!isSupabaseConfigured) {\n      const user = mockUsers.find(u => u.email === email);\n      if (user && password === '123456') {\n        setAuthState({\n          user,\n          isAuthenticated: true,\n          isLoading: false\n        });\n        localStorage.setItem('artistpro_user', JSON.stringify(user));\n        return true;\n      }\n      return false;\n    }\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (error || !((_data$session = data.session) !== null && _data$session !== void 0 && _data$session.user)) return false;\n    const profile = await fetchProfileAsUser(data.session.user.id);\n    setAuthState({\n      user: profile,\n      isAuthenticated: true,\n      isLoading: false\n    });\n    return true;\n  };\n  const logout = () => {\n    if (isSupabaseConfigured) {\n      supabase.auth.signOut();\n    }\n    setAuthState({\n      user: null,\n      isAuthenticated: false,\n      isLoading: false\n    });\n    localStorage.removeItem('danz_user');\n    localStorage.removeItem('artistpro_user');\n  };\n  const register = async userData => {\n    if (!isSupabaseConfigured) {\n      const newUser = {\n        id: Date.now().toString(),\n        email: userData.email || '',\n        name: userData.name || '',\n        type: userData.type || 'dancer',\n        level: userData.level || 'basic',\n        createdAt: new Date().toISOString(),\n        ...userData\n      };\n      setAuthState({\n        user: newUser,\n        isAuthenticated: true,\n        isLoading: false\n      });\n      localStorage.setItem('artistpro_user', JSON.stringify(newUser));\n      return true;\n    }\n    const password = userData.password || 'ChangeMe#12345';\n    const role = userData.type === 'contractor' ? 'contractor' : 'artist';\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email: userData.email,\n      password,\n      options: {\n        data: {\n          name: userData.name,\n          role\n        }\n      }\n    });\n    if (error || !data.user) return false;\n    await upsertProfile(data.user.id, {\n      email: userData.email,\n      name: userData.name,\n      type: userData.type || 'dancer',\n      level: userData.level || 'basic'\n    });\n    const profile = await fetchProfileAsUser(data.user.id);\n    setAuthState({\n      user: profile,\n      isAuthenticated: true,\n      isLoading: false\n    });\n    return true;\n  };\n  const updateProfile = userData => {\n    if (authState.user) {\n      const updatedUser = {\n        ...authState.user,\n        ...userData\n      };\n      setAuthState({\n        ...authState,\n        user: updatedUser\n      });\n      localStorage.setItem('artistpro_user', JSON.stringify(updatedUser));\n    }\n  };\n  const contextValue = {\n    ...authState,\n    login,\n    logout,\n    register,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"AXEeGMx0X76ZQE9M5uyCJAu5C64=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nasync function fetchProfileAsUser(id) {\n  // fetch profile from Supabase and map to local User type\n  const {\n    data,\n    error\n  } = await supabase.from('profiles').select('*').eq('id', id).single();\n  if (error || !data) {\n    var _auth$user, _auth$user2, _auth$user2$user_meta, _auth$user3, _auth$user3$user_meta, _auth$user4, _auth$user4$user_meta;\n    // Fallback minimal user from auth\n    const {\n      data: auth\n    } = await supabase.auth.getUser();\n    const email = ((_auth$user = auth.user) === null || _auth$user === void 0 ? void 0 : _auth$user.email) || '';\n    return {\n      id,\n      email,\n      name: ((_auth$user2 = auth.user) === null || _auth$user2 === void 0 ? void 0 : (_auth$user2$user_meta = _auth$user2.user_metadata) === null || _auth$user2$user_meta === void 0 ? void 0 : _auth$user2$user_meta.name) || email,\n      type: ((_auth$user3 = auth.user) === null || _auth$user3 === void 0 ? void 0 : (_auth$user3$user_meta = _auth$user3.user_metadata) === null || _auth$user3$user_meta === void 0 ? void 0 : _auth$user3$user_meta.role) === 'contractor' ? 'contractor' : ((_auth$user4 = auth.user) === null || _auth$user4 === void 0 ? void 0 : (_auth$user4$user_meta = _auth$user4.user_metadata) === null || _auth$user4$user_meta === void 0 ? void 0 : _auth$user4$user_meta.role) === 'admin' ? 'admin' : 'dancer',\n      level: 'basic',\n      createdAt: new Date().toISOString()\n    };\n  }\n  const role = data.role;\n  const mapped = {\n    id: data.id,\n    email: data.email || '',\n    name: data.name || '',\n    type: role === 'contractor' ? 'contractor' : role === 'admin' ? 'admin' : 'dancer',\n    level: data.level || 'basic',\n    avatar: data.avatar_url || undefined,\n    bio: data.bio || undefined,\n    location: data.location || undefined,\n    phone: data.phone || undefined,\n    website: data.website || undefined,\n    socialMedia: data.social_media || undefined,\n    isVerified: !!data.is_verified,\n    createdAt: data.created_at\n  };\n  return mapped;\n}\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useContext","mockUsers","supabase","isSupabaseConfigured","upsertProfile","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","authState","setAuthState","user","isAuthenticated","isLoading","savedUser","localStorage","getItem","JSON","parse","error","removeItem","data","auth","getSession","session","fetchProfileAsUser","id","sub","onAuthStateChange","_event","subscription","unsubscribe","login","email","password","_data$session","find","u","setItem","stringify","signInWithPassword","profile","logout","signOut","register","userData","newUser","Date","now","toString","name","type","level","createdAt","toISOString","role","signUp","options","updateProfile","updatedUser","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","from","select","eq","single","_auth$user","_auth$user2","_auth$user2$user_meta","_auth$user3","_auth$user3$user_meta","_auth$user4","_auth$user4$user_meta","getUser","user_metadata","mapped","avatar","avatar_url","bio","location","phone","website","socialMedia","social_media","isVerified","is_verified","created_at","$RefreshReg$"],"sources":["C:/Users/Home/Documents/Documents/Eng Software/danz/src/hooks/useAuth.tsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext, ReactNode } from 'react';\nimport { User, AuthState } from '../types';\nimport { mockUsers } from '../data/mockData';\nimport { supabase, isSupabaseConfigured } from '../lib/supabaseClient';\nimport type { AuthChangeEvent, Session } from '@supabase/supabase-js';\nimport { upsertProfile } from '../services/api';\n\n// Export vazio para tornar o arquivo um módulo\nexport {};\n\ninterface AuthContextType extends AuthState {\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  register: (userData: Partial<User>) => Promise<boolean>;\n  updateProfile: (userData: Partial<User>) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    isAuthenticated: false,\n    isLoading: true\n  });\n\n  useEffect(() => {\n    if (!isSupabaseConfigured) {\n      // Simular verificação de token/sessão\n      const savedUser = localStorage.getItem('artistpro_user') || localStorage.getItem('danz_user');\n      if (savedUser) {\n        try {\n          const user = JSON.parse(savedUser);\n          setAuthState({ user, isAuthenticated: true, isLoading: false });\n        } catch (error) {\n          localStorage.removeItem('danz_user');\n          localStorage.removeItem('artistpro_user');\n          setAuthState({ user: null, isAuthenticated: false, isLoading: false });\n        }\n      } else {\n        setAuthState({ user: null, isAuthenticated: false, isLoading: false });\n      }\n      return;\n    }\n\n    // Supabase session check\n    (async () => {\n      const { data } = await supabase.auth.getSession();\n      const session = data.session;\n      if (session?.user) {\n        const user = await fetchProfileAsUser(session.user.id);\n        setAuthState({ user, isAuthenticated: true, isLoading: false });\n      } else {\n        setAuthState({ user: null, isAuthenticated: false, isLoading: false });\n      }\n    })();\n\n    const { data: sub } = supabase.auth.onAuthStateChange(async (_event: AuthChangeEvent, session: Session | null) => {\n      if (session?.user) {\n        const user = await fetchProfileAsUser(session.user.id);\n        setAuthState({ user, isAuthenticated: true, isLoading: false });\n      } else {\n        setAuthState({ user: null, isAuthenticated: false, isLoading: false });\n      }\n    });\n\n    return () => {\n      sub.subscription.unsubscribe();\n    };\n  }, []);\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    if (!isSupabaseConfigured) {\n      const user = mockUsers.find(u => u.email === email);\n      if (user && password === '123456') {\n        setAuthState({ user, isAuthenticated: true, isLoading: false });\n        localStorage.setItem('artistpro_user', JSON.stringify(user));\n        return true;\n      }\n      return false;\n    }\n\n    const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n    if (error || !data.session?.user) return false;\n    const profile = await fetchProfileAsUser(data.session.user.id);\n    setAuthState({ user: profile, isAuthenticated: true, isLoading: false });\n    return true;\n  };\n\n  const logout = () => {\n    if (isSupabaseConfigured) {\n      supabase.auth.signOut();\n    }\n    setAuthState({ user: null, isAuthenticated: false, isLoading: false });\n    localStorage.removeItem('danz_user');\n    localStorage.removeItem('artistpro_user');\n  };\n\n  const register = async (userData: Partial<User>): Promise<boolean> => {\n    if (!isSupabaseConfigured) {\n      const newUser: User = {\n        id: Date.now().toString(),\n        email: userData.email || '',\n        name: userData.name || '',\n        type: userData.type || 'dancer',\n        level: userData.level || 'basic',\n        createdAt: new Date().toISOString(),\n        ...userData\n      };\n      setAuthState({ user: newUser, isAuthenticated: true, isLoading: false });\n      localStorage.setItem('artistpro_user', JSON.stringify(newUser));\n      return true;\n    }\n\n    const password = (userData as any).password || 'ChangeMe#12345';\n    const role = userData.type === 'contractor' ? 'contractor' : 'artist';\n    const { data, error } = await supabase.auth.signUp({\n      email: userData.email!,\n      password,\n      options: { data: { name: userData.name, role } }\n    });\n    if (error || !data.user) return false;\n    await upsertProfile(data.user.id, {\n      email: userData.email,\n      name: userData.name,\n      type: userData.type || 'dancer',\n      level: userData.level || 'basic'\n    });\n    const profile = await fetchProfileAsUser(data.user.id);\n    setAuthState({ user: profile, isAuthenticated: true, isLoading: false });\n    return true;\n  };\n\n  const updateProfile = (userData: Partial<User>) => {\n    if (authState.user) {\n      const updatedUser = { ...authState.user, ...userData };\n      setAuthState({\n        ...authState,\n        user: updatedUser\n      });\n      localStorage.setItem('artistpro_user', JSON.stringify(updatedUser));\n    }\n  };\n\n  const contextValue: AuthContextType = {\n    ...authState,\n    login,\n    logout,\n    register,\n    updateProfile\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nasync function fetchProfileAsUser(id: string): Promise<User> {\n  // fetch profile from Supabase and map to local User type\n  const { data, error } = await supabase.from('profiles').select('*').eq('id', id).single();\n  if (error || !data) {\n    // Fallback minimal user from auth\n    const { data: auth } = await supabase.auth.getUser();\n    const email = auth.user?.email || '';\n    return {\n      id,\n      email,\n      name: auth.user?.user_metadata?.name || email,\n      type: (auth.user?.user_metadata?.role === 'contractor' ? 'contractor' : auth.user?.user_metadata?.role === 'admin' ? 'admin' : 'dancer'),\n      level: 'basic',\n      createdAt: new Date().toISOString()\n    } as User;\n  }\n\n  const role = data.role;\n  const mapped: User = {\n    id: data.id,\n    email: data.email || '',\n    name: data.name || '',\n    type: role === 'contractor' ? 'contractor' : role === 'admin' ? 'admin' : 'dancer',\n    level: (data.level as any) || 'basic',\n    avatar: data.avatar_url || undefined,\n    bio: data.bio || undefined,\n    location: data.location || undefined,\n    phone: data.phone || undefined,\n    website: data.website || undefined,\n    socialMedia: data.social_media || undefined,\n    isVerified: !!data.is_verified,\n    createdAt: data.created_at\n  } as User;\n  return mapped;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}