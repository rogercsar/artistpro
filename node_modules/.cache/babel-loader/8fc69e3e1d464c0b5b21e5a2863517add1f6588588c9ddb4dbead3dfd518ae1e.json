{"ast":null,"code":"import { supabase, isSupabaseConfigured } from '../lib/supabaseClient';\nimport { mockEvents, mockDancerProfiles, mockContractorProfiles } from '../data/mockData';\nfunction mapContractorFromView(p) {\n  return {\n    id: (p === null || p === void 0 ? void 0 : p.id) || '',\n    email: (p === null || p === void 0 ? void 0 : p.email) || '',\n    name: (p === null || p === void 0 ? void 0 : p.name) || '',\n    type: 'contractor',\n    level: (p === null || p === void 0 ? void 0 : p.level) || 'basic',\n    avatar: (p === null || p === void 0 ? void 0 : p.avatar) || (p === null || p === void 0 ? void 0 : p.avatar_url) || undefined,\n    bio: (p === null || p === void 0 ? void 0 : p.bio) || undefined,\n    location: (p === null || p === void 0 ? void 0 : p.location) || undefined,\n    website: (p === null || p === void 0 ? void 0 : p.website) || undefined,\n    isVerified: !!(p !== null && p !== void 0 && p.is_verified),\n    createdAt: (p === null || p === void 0 ? void 0 : p.created_at) || new Date().toISOString(),\n    companyName: (p === null || p === void 0 ? void 0 : p.name) || '',\n    companyLogo: (p === null || p === void 0 ? void 0 : p.avatar) || (p === null || p === void 0 ? void 0 : p.avatar_url) || undefined,\n    companyDescription: (p === null || p === void 0 ? void 0 : p.bio) || undefined,\n    events: [],\n    reviews: [],\n    rating: Number((p === null || p === void 0 ? void 0 : p.rating) || 0)\n  };\n}\nfunction mapEventRowToEvent(e) {\n  var _e$duration, _e$max_participants;\n  const budgetMin = e === null || e === void 0 ? void 0 : e.budget_min;\n  const budgetMax = e === null || e === void 0 ? void 0 : e.budget_max;\n  return {\n    id: e.id,\n    title: e.title,\n    description: e.description,\n    contractorId: e.contractor_id,\n    contractor: mapContractorFromView(e.contractor || {}),\n    location: e.location,\n    date: e.date,\n    time: e.time,\n    duration: (_e$duration = e.duration) !== null && _e$duration !== void 0 ? _e$duration : undefined,\n    requirements: e.requirements || [],\n    danceStyles: e.genres || e.danceStyles || [],\n    budget: budgetMin != null || budgetMax != null ? {\n      min: Number(budgetMin || 0),\n      max: Number(budgetMax || 0),\n      currency: e.budget_currency || 'BRL'\n    } : undefined,\n    maxParticipants: (_e$max_participants = e.max_participants) !== null && _e$max_participants !== void 0 ? _e$max_participants : undefined,\n    currentParticipants: [],\n    interestedDancers: [],\n    status: e.status,\n    createdAt: e.created_at,\n    images: e.images || [],\n    tags: e.tags || []\n  };\n}\nexport async function fetchEvents(category) {\n  if (!isSupabaseConfigured) return mockEvents;\n  let query = supabase.from('events_view').select('*').order('date', {\n    ascending: true\n  });\n  if (category) query = query.eq('category', category);\n  const {\n    data,\n    error\n  } = await query;\n  if (error) {\n    console.error('fetchEvents error', error);\n    return mockEvents;\n  }\n  return data.map(mapEventRowToEvent);\n}\nexport async function fetchEventById(id) {\n  if (!isSupabaseConfigured) return mockEvents.find(e => e.id === id);\n  const {\n    data,\n    error\n  } = await supabase.from('events_view').select('*').eq('id', id).single();\n  if (error) {\n    console.error('fetchEventById error', error);\n    return mockEvents.find(e => e.id === id);\n  }\n  return mapEventRowToEvent(data);\n}\nexport async function fetchDancers(category = 'dance') {\n  if (!isSupabaseConfigured) return mockDancerProfiles;\n  const {\n    data,\n    error\n  } = await supabase.from('profiles_view').select('*').eq('role', 'artist').eq('category', category).order('created_at', {\n    ascending: false\n  });\n  if (error) {\n    console.error('fetchDancers error', error);\n    return mockDancerProfiles;\n  }\n  // Garantir compatibilidade mínima com DancerProfile esperado no front\n  const mapped = data.map(p => ({\n    id: p.id,\n    email: p.email || '',\n    name: p.name || '',\n    type: 'dancer',\n    level: p.level || 'basic',\n    avatar: p.avatar_url || undefined,\n    bio: p.bio || undefined,\n    location: p.location || undefined,\n    website: p.website || undefined,\n    socialMedia: p.social_media || undefined,\n    isVerified: !!p.is_verified,\n    createdAt: p.created_at,\n    skills: [],\n    portfolio: {\n      photos: p.portfolio_photos || [],\n      videos: p.portfolio_videos || []\n    },\n    availability: {},\n    experience: '',\n    danceStyles: [],\n    reviews: [],\n    rating: Number(p.rating || 0)\n  }));\n  return mapped;\n}\nexport async function fetchContractors(category) {\n  if (!isSupabaseConfigured) return mockContractorProfiles;\n  let query = supabase.from('profiles_view').select('*').eq('role', 'contractor').order('created_at', {\n    ascending: false\n  });\n  if (category) query = query.eq('contractor_category', category);\n  const {\n    data,\n    error\n  } = await query;\n  if (error) {\n    console.error('fetchContractors error', error);\n    return mockContractorProfiles;\n  }\n  const mapped = data.map(p => ({\n    id: p.id,\n    email: p.email || '',\n    name: p.name || '',\n    type: 'contractor',\n    level: p.level || 'basic',\n    avatar: p.avatar_url || undefined,\n    bio: p.bio || undefined,\n    location: p.location || undefined,\n    website: p.website || undefined,\n    isVerified: !!p.is_verified,\n    createdAt: p.created_at,\n    companyName: p.name || '',\n    companyLogo: p.avatar_url || undefined,\n    companyDescription: p.bio || undefined,\n    events: [],\n    reviews: [],\n    rating: Number(p.rating || 0)\n  }));\n  return mapped;\n}\nexport async function createEvent(payload) {\n  if (!isSupabaseConfigured) return {\n    ok: false,\n    error: 'Supabase not configured'\n  };\n  const {\n    data,\n    error\n  } = await supabase.from('events').insert(payload).select('id').single();\n  if (error) return {\n    ok: false,\n    error\n  };\n  return {\n    ok: true,\n    id: data.id\n  };\n}\nexport async function upsertProfile(id, payload) {\n  if (!isSupabaseConfigured) return {\n    ok: false,\n    error: 'Supabase not configured'\n  };\n  const {\n    error\n  } = await supabase.from('profiles').upsert({\n    id,\n    ...payload\n  }).eq('id', id);\n  if (error) return {\n    ok: false,\n    error\n  };\n  return {\n    ok: true\n  };\n}\n\n// -------- Event Interests (user ↔ event) --------\nexport async function getMyEventInterest(eventId) {\n  if (!isSupabaseConfigured) return false;\n  const {\n    data,\n    error\n  } = await supabase.from('event_interests').select('id').eq('event_id', eventId).limit(1);\n  if (error) {\n    console.error('getMyEventInterest error', error);\n    return false;\n  }\n  return Array.isArray(data) && data.length > 0;\n}\nexport async function addEventInterest(eventId) {\n  var _auth$user;\n  if (!isSupabaseConfigured) return false;\n  const {\n    data: auth\n  } = await supabase.auth.getUser();\n  const userId = (_auth$user = auth.user) === null || _auth$user === void 0 ? void 0 : _auth$user.id;\n  if (!userId) return false;\n  const {\n    error\n  } = await supabase.from('event_interests').insert({\n    event_id: eventId,\n    user_id: userId\n  });\n  if (error) {\n    console.error('addEventInterest error', error);\n    return false;\n  }\n  return true;\n}\nexport async function removeEventInterest(eventId) {\n  var _auth$user2;\n  if (!isSupabaseConfigured) return false;\n  const {\n    data: auth\n  } = await supabase.auth.getUser();\n  const userId = (_auth$user2 = auth.user) === null || _auth$user2 === void 0 ? void 0 : _auth$user2.id;\n  if (!userId) return false;\n  const {\n    error\n  } = await supabase.from('event_interests').delete().eq('event_id', eventId).eq('user_id', userId);\n  if (error) {\n    console.error('removeEventInterest error', error);\n    return false;\n  }\n  return true;\n}\nexport async function getEventInterestCount(eventId) {\n  if (!isSupabaseConfigured) return 0;\n  const {\n    count,\n    error\n  } = await supabase.from('event_interests').select('id', {\n    count: 'exact',\n    head: true\n  }).eq('event_id', eventId);\n  if (error) {\n    console.error('getEventInterestCount error', error);\n    return 0;\n  }\n  return count || 0;\n}\n\n// -------- Favorites --------\nfunction mapFavoriteRowToFavorite(row) {\n  const type = row.type === 'artist' ? 'dancer' : row.type;\n  return {\n    id: row.id,\n    userId: row.user_id,\n    type: type,\n    itemId: row.item_id,\n    createdAt: row.created_at\n  };\n}\nexport async function fetchMyFavorites() {\n  if (!isSupabaseConfigured) return [];\n  const {\n    data,\n    error\n  } = await supabase.from('favorites').select('*').order('created_at', {\n    ascending: false\n  });\n  if (error) {\n    console.error('fetchMyFavorites error', error);\n    return [];\n  }\n  return data.map(mapFavoriteRowToFavorite);\n}\nexport async function addFavoriteItem(type, itemId) {\n  var _auth$user3;\n  if (!isSupabaseConfigured) return null;\n  const {\n    data: auth\n  } = await supabase.auth.getUser();\n  const userId = (_auth$user3 = auth.user) === null || _auth$user3 === void 0 ? void 0 : _auth$user3.id;\n  if (!userId) return null;\n  const dbType = type === 'dancer' ? 'artist' : type;\n  const {\n    data,\n    error\n  } = await supabase.from('favorites').insert({\n    user_id: userId,\n    type: dbType,\n    item_id: itemId\n  }).select('*').single();\n  if (error) {\n    console.error('addFavoriteItem error', error);\n    return null;\n  }\n  return mapFavoriteRowToFavorite(data);\n}\nexport async function removeFavoriteItem(type, itemId) {\n  var _auth$user4;\n  if (!isSupabaseConfigured) return false;\n  const {\n    data: auth\n  } = await supabase.auth.getUser();\n  const userId = (_auth$user4 = auth.user) === null || _auth$user4 === void 0 ? void 0 : _auth$user4.id;\n  if (!userId) return false;\n  const dbType = type === 'dancer' ? 'artist' : type;\n  const {\n    error\n  } = await supabase.from('favorites').delete().eq('user_id', userId).eq('type', dbType).eq('item_id', itemId);\n  if (error) {\n    console.error('removeFavoriteItem error', error);\n    return false;\n  }\n  return true;\n}\n\n// -------- Bulk fetch helpers for Favorites page --------\nexport async function fetchEventsByIds(ids) {\n  if (!isSupabaseConfigured || ids.length === 0) return [];\n  const {\n    data,\n    error\n  } = await supabase.from('events_view').select('*').in('id', ids);\n  if (error) {\n    console.error('fetchEventsByIds error', error);\n    return [];\n  }\n  return data.map(mapEventRowToEvent);\n}\nexport async function fetchProfilesByIds(ids) {\n  if (!isSupabaseConfigured || ids.length === 0) return [];\n  const {\n    data,\n    error\n  } = await supabase.from('profiles_view').select('*').in('id', ids);\n  if (error) {\n    console.error('fetchProfilesByIds error', error);\n    return [];\n  }\n  return data.map(p => {\n    if (p.role === 'contractor') {\n      return mapContractorFromView(p);\n    }\n    // artist → map to DancerProfile minimal\n    const mapped = {\n      id: p.id,\n      email: p.email || '',\n      name: p.name || '',\n      type: 'dancer',\n      level: p.level || 'basic',\n      avatar: p.avatar_url || undefined,\n      bio: p.bio || undefined,\n      location: p.location || undefined,\n      website: p.website || undefined,\n      isVerified: !!p.is_verified,\n      createdAt: p.created_at,\n      skills: [],\n      portfolio: {\n        photos: p.portfolio_photos || [],\n        videos: p.portfolio_videos || []\n      },\n      availability: {},\n      experience: '',\n      danceStyles: [],\n      reviews: [],\n      rating: Number(p.rating || 0)\n    };\n    return mapped;\n  });\n}","map":{"version":3,"names":["supabase","isSupabaseConfigured","mockEvents","mockDancerProfiles","mockContractorProfiles","mapContractorFromView","p","id","email","name","type","level","avatar","avatar_url","undefined","bio","location","website","isVerified","is_verified","createdAt","created_at","Date","toISOString","companyName","companyLogo","companyDescription","events","reviews","rating","Number","mapEventRowToEvent","e","_e$duration","_e$max_participants","budgetMin","budget_min","budgetMax","budget_max","title","description","contractorId","contractor_id","contractor","date","time","duration","requirements","danceStyles","genres","budget","min","max","currency","budget_currency","maxParticipants","max_participants","currentParticipants","interestedDancers","status","images","tags","fetchEvents","category","query","from","select","order","ascending","eq","data","error","console","map","fetchEventById","find","single","fetchDancers","mapped","socialMedia","social_media","skills","portfolio","photos","portfolio_photos","videos","portfolio_videos","availability","experience","fetchContractors","createEvent","payload","ok","insert","upsertProfile","upsert","getMyEventInterest","eventId","limit","Array","isArray","length","addEventInterest","_auth$user","auth","getUser","userId","user","event_id","user_id","removeEventInterest","_auth$user2","delete","getEventInterestCount","count","head","mapFavoriteRowToFavorite","row","itemId","item_id","fetchMyFavorites","addFavoriteItem","_auth$user3","dbType","removeFavoriteItem","_auth$user4","fetchEventsByIds","ids","in","fetchProfilesByIds","role"],"sources":["C:/Users/Home/Documents/Documents/Eng Software/danz/src/services/api.ts"],"sourcesContent":["import { supabase, isSupabaseConfigured } from '../lib/supabaseClient';\nimport { Event, DancerProfile, ContractorProfile, User, Favorite } from '../types';\nimport { mockEvents, mockDancerProfiles, mockContractorProfiles } from '../data/mockData';\n\nfunction mapContractorFromView(p: any): ContractorProfile {\n  return {\n    id: p?.id || '',\n    email: p?.email || '',\n    name: p?.name || '',\n    type: 'contractor',\n    level: (p?.level as any) || 'basic',\n    avatar: p?.avatar || p?.avatar_url || undefined,\n    bio: p?.bio || undefined,\n    location: p?.location || undefined,\n    website: p?.website || undefined,\n    isVerified: !!p?.is_verified,\n    createdAt: p?.created_at || new Date().toISOString(),\n    companyName: p?.name || '',\n    companyLogo: p?.avatar || p?.avatar_url || undefined,\n    companyDescription: p?.bio || undefined,\n    events: [],\n    reviews: [],\n    rating: Number(p?.rating || 0)\n  } as ContractorProfile;\n}\n\nfunction mapEventRowToEvent(e: any): Event {\n  const budgetMin = e?.budget_min;\n  const budgetMax = e?.budget_max;\n  return {\n    id: e.id,\n    title: e.title,\n    description: e.description,\n    contractorId: e.contractor_id,\n    contractor: mapContractorFromView(e.contractor || {}),\n    location: e.location,\n    date: e.date,\n    time: e.time,\n    duration: e.duration ?? undefined,\n    requirements: e.requirements || [],\n    danceStyles: e.genres || e.danceStyles || [],\n    budget: budgetMin != null || budgetMax != null ? {\n      min: Number(budgetMin || 0),\n      max: Number(budgetMax || 0),\n      currency: e.budget_currency || 'BRL'\n    } : undefined,\n    maxParticipants: e.max_participants ?? undefined,\n    currentParticipants: [],\n    interestedDancers: [],\n    status: e.status,\n    createdAt: e.created_at,\n    images: e.images || [],\n    tags: e.tags || []\n  } as Event;\n}\n\nexport async function fetchEvents(category?: 'dance' | 'theater' | 'clowning' | 'music'): Promise<Event[]> {\n  if (!isSupabaseConfigured) return mockEvents;\n  let query = supabase.from('events_view').select('*').order('date', { ascending: true });\n  if (category) query = (query as any).eq('category', category);\n  const { data, error } = await (query as any);\n  if (error) {\n    console.error('fetchEvents error', error);\n    return mockEvents;\n  }\n  return (data as any[]).map(mapEventRowToEvent);\n}\n\nexport async function fetchEventById(id: string): Promise<Event | undefined> {\n  if (!isSupabaseConfigured) return mockEvents.find(e => e.id === id);\n  const { data, error } = await supabase\n    .from('events_view')\n    .select('*')\n    .eq('id', id)\n    .single();\n  if (error) {\n    console.error('fetchEventById error', error);\n    return mockEvents.find(e => e.id === id);\n  }\n  return mapEventRowToEvent(data as any);\n}\n\nexport async function fetchDancers(category: 'dance' | 'theater' | 'clowning' | 'music' = 'dance'): Promise<DancerProfile[]> {\n  if (!isSupabaseConfigured) return mockDancerProfiles;\n  const { data, error } = await supabase\n    .from('profiles_view')\n    .select('*')\n    .eq('role', 'artist')\n    .eq('category', category)\n    .order('created_at', { ascending: false });\n  if (error) {\n    console.error('fetchDancers error', error);\n    return mockDancerProfiles;\n  }\n  // Garantir compatibilidade mínima com DancerProfile esperado no front\n  const mapped = (data as any[]).map((p: any) => ({\n    id: p.id,\n    email: p.email || '',\n    name: p.name || '',\n    type: 'dancer',\n    level: (p.level as any) || 'basic',\n    avatar: p.avatar_url || undefined,\n    bio: p.bio || undefined,\n    location: p.location || undefined,\n    website: p.website || undefined,\n    socialMedia: p.social_media || undefined,\n    isVerified: !!p.is_verified,\n    createdAt: p.created_at,\n    skills: [],\n    portfolio: { photos: p.portfolio_photos || [], videos: p.portfolio_videos || [] },\n    availability: {},\n    experience: '',\n    danceStyles: [],\n    reviews: [],\n    rating: Number(p.rating || 0)\n  })) as DancerProfile[];\n  return mapped;\n}\n\nexport async function fetchContractors(category?: 'dance' | 'theater' | 'clowning' | 'music'): Promise<ContractorProfile[]> {\n  if (!isSupabaseConfigured) return mockContractorProfiles;\n  let query = supabase\n    .from('profiles_view')\n    .select('*')\n    .eq('role', 'contractor')\n    .order('created_at', { ascending: false }) as any;\n  if (category) query = query.eq('contractor_category', category);\n  const { data, error } = await query;\n  if (error) {\n    console.error('fetchContractors error', error);\n    return mockContractorProfiles;\n  }\n  const mapped = (data as any[]).map((p: any) => ({\n    id: p.id,\n    email: p.email || '',\n    name: p.name || '',\n    type: 'contractor',\n    level: (p.level as any) || 'basic',\n    avatar: p.avatar_url || undefined,\n    bio: p.bio || undefined,\n    location: p.location || undefined,\n    website: p.website || undefined,\n    isVerified: !!p.is_verified,\n    createdAt: p.created_at,\n    companyName: p.name || '',\n    companyLogo: p.avatar_url || undefined,\n    companyDescription: p.bio || undefined,\n    events: [],\n    reviews: [],\n    rating: Number(p.rating || 0)\n  })) as ContractorProfile[];\n  return mapped;\n}\n\nexport async function createEvent(payload: any): Promise<{ ok: boolean; id?: string; error?: any }>{\n  if (!isSupabaseConfigured) return { ok: false, error: 'Supabase not configured' };\n  const { data, error } = await supabase\n    .from('events')\n    .insert(payload)\n    .select('id')\n    .single();\n  if (error) return { ok: false, error };\n  return { ok: true, id: (data as any).id };\n}\n\nexport async function upsertProfile(id: string, payload: Partial<User>): Promise<{ ok: boolean; error?: any }>{\n  if (!isSupabaseConfigured) return { ok: false, error: 'Supabase not configured' };\n  const { error } = await supabase\n    .from('profiles')\n    .upsert({ id, ...payload })\n    .eq('id', id);\n  if (error) return { ok: false, error };\n  return { ok: true };\n}\n\n// -------- Event Interests (user ↔ event) --------\nexport async function getMyEventInterest(eventId: string): Promise<boolean> {\n  if (!isSupabaseConfigured) return false;\n  const { data, error } = await supabase\n    .from('event_interests')\n    .select('id')\n    .eq('event_id', eventId)\n    .limit(1);\n  if (error) {\n    console.error('getMyEventInterest error', error);\n    return false;\n  }\n  return Array.isArray(data) && data.length > 0;\n}\n\nexport async function addEventInterest(eventId: string): Promise<boolean> {\n  if (!isSupabaseConfigured) return false;\n  const { data: auth } = await supabase.auth.getUser();\n  const userId = auth.user?.id;\n  if (!userId) return false;\n  const { error } = await supabase\n    .from('event_interests')\n    .insert({ event_id: eventId, user_id: userId });\n  if (error) {\n    console.error('addEventInterest error', error);\n    return false;\n  }\n  return true;\n}\n\nexport async function removeEventInterest(eventId: string): Promise<boolean> {\n  if (!isSupabaseConfigured) return false;\n  const { data: auth } = await supabase.auth.getUser();\n  const userId = auth.user?.id;\n  if (!userId) return false;\n  const { error } = await supabase\n    .from('event_interests')\n    .delete()\n    .eq('event_id', eventId)\n    .eq('user_id', userId);\n  if (error) {\n    console.error('removeEventInterest error', error);\n    return false;\n  }\n  return true;\n}\n\nexport async function getEventInterestCount(eventId: string): Promise<number> {\n  if (!isSupabaseConfigured) return 0;\n  const { count, error } = await supabase\n    .from('event_interests')\n    .select('id', { count: 'exact', head: true })\n    .eq('event_id', eventId);\n  if (error) {\n    console.error('getEventInterestCount error', error);\n    return 0;\n  }\n  return count || 0;\n}\n\n// -------- Favorites --------\nfunction mapFavoriteRowToFavorite(row: any): Favorite {\n  const type = row.type === 'artist' ? 'dancer' : row.type;\n  return {\n    id: row.id,\n    userId: row.user_id,\n    type: type,\n    itemId: row.item_id,\n    createdAt: row.created_at\n  } as Favorite;\n}\n\nexport async function fetchMyFavorites(): Promise<Favorite[]> {\n  if (!isSupabaseConfigured) return [];\n  const { data, error } = await supabase\n    .from('favorites')\n    .select('*')\n    .order('created_at', { ascending: false });\n  if (error) {\n    console.error('fetchMyFavorites error', error);\n    return [];\n  }\n  return (data as any[]).map(mapFavoriteRowToFavorite);\n}\n\nexport async function addFavoriteItem(type: 'event' | 'dancer' | 'contractor', itemId: string): Promise<Favorite | null> {\n  if (!isSupabaseConfigured) return null;\n  const { data: auth } = await supabase.auth.getUser();\n  const userId = auth.user?.id;\n  if (!userId) return null;\n  const dbType = type === 'dancer' ? 'artist' : type;\n  const { data, error } = await supabase\n    .from('favorites')\n    .insert({ user_id: userId, type: dbType, item_id: itemId })\n    .select('*')\n    .single();\n  if (error) {\n    console.error('addFavoriteItem error', error);\n    return null;\n  }\n  return mapFavoriteRowToFavorite(data as any);\n}\n\nexport async function removeFavoriteItem(type: 'event' | 'dancer' | 'contractor', itemId: string): Promise<boolean> {\n  if (!isSupabaseConfigured) return false;\n  const { data: auth } = await supabase.auth.getUser();\n  const userId = auth.user?.id;\n  if (!userId) return false;\n  const dbType = type === 'dancer' ? 'artist' : type;\n  const { error } = await supabase\n    .from('favorites')\n    .delete()\n    .eq('user_id', userId)\n    .eq('type', dbType)\n    .eq('item_id', itemId);\n  if (error) {\n    console.error('removeFavoriteItem error', error);\n    return false;\n  }\n  return true;\n}\n\n// -------- Bulk fetch helpers for Favorites page --------\nexport async function fetchEventsByIds(ids: string[]): Promise<Event[]> {\n  if (!isSupabaseConfigured || ids.length === 0) return [];\n  const { data, error } = await supabase\n    .from('events_view')\n    .select('*')\n    .in('id', ids);\n  if (error) {\n    console.error('fetchEventsByIds error', error);\n    return [];\n  }\n  return (data as any[]).map(mapEventRowToEvent);\n}\n\nexport async function fetchProfilesByIds(ids: string[]): Promise<(DancerProfile | ContractorProfile)[]> {\n  if (!isSupabaseConfigured || ids.length === 0) return [] as any[];\n  const { data, error } = await supabase\n    .from('profiles_view')\n    .select('*')\n    .in('id', ids);\n  if (error) {\n    console.error('fetchProfilesByIds error', error);\n    return [];\n  }\n  return (data as any[]).map((p: any) => {\n    if (p.role === 'contractor') {\n      return mapContractorFromView(p);\n    }\n    // artist → map to DancerProfile minimal\n    const mapped: DancerProfile = {\n      id: p.id,\n      email: p.email || '',\n      name: p.name || '',\n      type: 'dancer',\n      level: (p.level as any) || 'basic',\n      avatar: p.avatar_url || undefined,\n      bio: p.bio || undefined,\n      location: p.location || undefined,\n      website: p.website || undefined,\n      isVerified: !!p.is_verified,\n      createdAt: p.created_at,\n      skills: [],\n      portfolio: { photos: p.portfolio_photos || [], videos: p.portfolio_videos || [] },\n      availability: {},\n      experience: '',\n      danceStyles: [],\n      reviews: [],\n      rating: Number(p.rating || 0)\n    };\n    return mapped;\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}